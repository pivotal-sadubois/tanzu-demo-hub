#!/bin/bash
#" ############################################################################################
# File: ........: deployTMC
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export TDH_DEPLOYMENT_CLOUD="AWS"
export DEPLOY_PCF_DEPLOYMENT=aws_tkg_default.cfg
export TDH_TOOLS_CONTAINER_TYPE=tkg

if [ "$(hostname)" == "tdh-tools" ]; then 
  export TDHPATH=/home/tanzu/tanzu-demo-hub
else
  export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
fi

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

# --- TMC CONFIG ---
unset TMC_MANAGEMENT_CLUSTER
unset TMC_ACCOUNT_NAME  

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <tmc-deployment>.cfg -c <tkg-configuration>.cfg [--debug]"
  echo "            Options:  -d <tmc-deployment.cfg>     # Tanzu Mission Control (TMC) Deployment Name"
  echo "                      -c <tkg-configuration.cfg>  # Tanzu Kubernetes Grid (TKG) Configuration"
  echo "                      [-e <sub-domain>]           # Optional DNS Subdomain (<xyz>.domainname>"
  echo "                      [-n <cluster-name>]         # Optional Cluster Name (default: tdh-<cloud>-<userid>)"
  echo ""
  echo "                      --debug                     # default (disabled)"
  echo "                      --clean                     # cleanuo the deployment"
  echo ""
}

while [ "$1" != "" ]; do
  case $1 in
    -c)  TKG_DEPLOYMENT=$2;;
    -d)  TMC_DEPLOYMENT=$2;;
    -e)  DNS_SUBDOMAIN=$2;;
    -n)  TDH_CLUSTER_NAME=$2;;
    --clean) DEPLOY_TKG_CLEAN=1;;
    --debug) DEBUG=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

# --- CHECK FOR BASIC COMANDS ---
checkCLIcommands        BASIC
tmcCheckLogin

if [ "${TKG_DEPLOYMENT}" == "" -o "${TMC_DEPLOYMENT}" == "" ]; then
  [ "${TKG_DEPLOYMENT}" == "" ] && listTMCDeployments
  [ "${TMC_DEPLOYMENT}" == "" ] && listClusterConfig

  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ -f $TDHPATH/deployments/${TMC_DEPLOYMENT} -o -f $HOME/.tanzu-demo-hub/config/${TMC_DEPLOYMENT} ]; then
  if [ -f $TDHPATH/deployments/${TMC_DEPLOYMENT} ]; then 
    TMC_DEPLOYMENT_CONFIG=${TDHPATH}/deployments/${TMC_DEPLOYMENT}
  else
    TMC_DEPLOYMENT_CONFIG=${HOME}/.tanzu-demo-hub/config/${TMC_DEPLOYMENT}
  fi
else
  echo "ERROR: Deployment file $pcf_deployment can not be found in the directory:"
  echo "       ${TDHPATH}/deployments or ${HOME}/.tanzu-demo-hub/config"
  exit 1
fi

if [ -f $TDHPATH/deployments/$TKG_DEPLOYMENT -o -f $HOME/.tanzu-demo-hub/config/$TKG_DEPLOYMENT ]; then
  if [ -f $TDHPATH/deployments/${TKG_DEPLOYMENT} ]; then 
    . $TDHPATH/deployments/$TKG_DEPLOYMENT
  else
    . $HOME/.tanzu-demo-hub/config/$TKG_DEPLOYMENT
  fi
else
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in the directory:"
  echo "       ${TDHPATH}/deployments or ${HOME}/.tanzu-demo-hub/config"
  exit 1
fi

#############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################

runTDHtools $TDH_TOOLS_CONTAINER_TYPE $TDH_TOOLS_CONTAINER_VERS "Deploy TKG Cluster with Tanzu Mission Control (TMC)" "/home/tanzu/tanzu-demo-hub/$CMD_EXEC" "$CMD_ARGS"

export TDHPATH=/home/tanzu/tanzu-demo-hub
cnt=$(egrep -c "^TDH_DEPLOYMENT_CLOUD=" $TMC_DEPLOYMENT_CONFIG)
if [ $cnt -eq 0 ]; then
  echo "ERROR: ${TMC_DEPLOYMENT_CONFIG} is not a correct TANZU-DEMO-HUB deployment configuration file"
  exit 1
else
  missing_variables=0

  . ${TMC_DEPLOYMENT_CONFIG}
  export TMC_CLUSTER_GROUP=$TDH_DEPLOYMENT_CLUSTERGROUP

  # --- CHECK ENVIRONMENT VARIABLES ---
  if [ -f ~/.tanzu-demo-hub.cfg ]; then
    . ~/.tanzu-demo-hub.cfg
  fi

  # CHECK AWS ACCOUNTS
  if [ "$TDH_DEPLOYMENT_CLOUD" == "AWS" ]; then 
    if [ "${AWS_ACCESS_KEY}" == "" -o "${AWS_SECRET_KEY}" == "" -o "${AWS_REGION}" == "" ]; then
      missing_variables=1

      echo ""
      echo "  MISSING ENVIRONMENT-VARIABES  DESCRIPTION        "
      echo "  --------------------------------------------------------------------------------------------------------------"

      if [ "${AWS_ACCESS_KEY}" == "" ]; then
        echo "  AWS_ACCESS_KEY       (required) AWS Access Key"
      fi

      if [ "${AWS_SECRET_KEY}" == "" ]; then
        echo "  AWS_SECRET_KEY       (required) AWS Secret Key"
      fi

      if [ "${AWS_REGION}" == "" ]; then
        echo "  AWS_REGION           (required) AWS Region"
      fi

      if [ "${AWS_SSH_KEY_NAME}" == "" ]; then
        echo "  AWS_SSH_KEY_NAME     (required) AWS SSH Key Name"
      fi

      if [ "${AWS_SSH_KEY_FILE}" == "" ]; then
        echo "  AWS_SSH_KEY_FILE     (required) AWS SSH Key File"
      fi
      echo ""
    fi
  fi

  if [ ${missing_variables} -eq 1 ]; then
    echo "  --------------------------------------------------------------------------------------------------------------"
    echo "  IMPORTANT: Please set the missing environment variables either in your shell or in the tanzu-demo-hub"
    echo "             configuration file ~/.tanzu-demo-hub.cfg and set all variables with the 'export' notation"
    echo "             ie. => export AZURE_PKS_TLS_CERTIFICATE=/home/demouser/certs/cert.pem"
    echo "  --------------------------------------------------------------------------------------------------------------"
    exit 1
  fi
fi

if [ "$DNS_SUBDOMAIN" != "" ]; then 
  TDH_ENVNAME=$DNS_SUBDOMAIN
fi 

export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

# --- VERYFY ACCESS TO CLOUD ---
checkTDHenvironment
checkKubernetesServices registry_docker
checkKubernetesServices cert-manager

# --- VERIFY TOOLS AND ACCESS ---
checkCloudCLI
checkCLIcommands TOOLS
checkCLIcommands TKG
checkCLIcommands TANZU
checkCLIcommands TMC

tmcCheckLogin
checkTDHAccess
checkTMCAccess
checkTMCcontext

#########################################################################################################################
########################################## CREATE TKG CLUSTER WITH TMC ##################################################
#########################################################################################################################
tmcCreateCluster
createClusterRoleBindingGroup  default-tkg-admin-privileged-binding "psp:vmware-system-privileged" "system:authenticated"

# sdubois: context should be set withing tmcCreateCluster
#getTDHClusterCredentials 

uodateConfigMap tanzu-demo-hub TDH_DOMAIN               $AWS_HOSTED_DNS_DOMAIN
uodateConfigMap tanzu-demo-hub TDH_ENVNAME              $TDH_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE      "tmc"
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC       "true"
uodateConfigMap tanzu-demo-hub TDH_TANZU_EDITION        "tkg"

uodateConfigMap tanzu-demo-hub TDH_CLUSTER_NAME                   "$TDH_CLUSTER_NAME"
uodateConfigMap tanzu-demo-hub TDH_MANAGEMENT_CLUSTER             "$TDH_MANAGEMENT_CLUSTER"
uodateConfigMap tanzu-demo-hub TDH_PROVISIONER_NAME               "$TDH_PROVISIONER_NAME"
uodateConfigMap tanzu-demo-hub TDH_MISSION_CONTROL_ACCOUNT_NAME   "$TMC_ACCOUNT_NAME"

# --- TANZU INTEGRATIONS ---
#checkTMCintegration      TO    ## Tanzu Observability (Wavefront)
checkTMCintegration      TDP   ## Tanzu Data Protection
checkTMCintegration      TCI   ## Tanzu Cluster Inspection

if [ -s $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg ]; then
 . $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg
else
  echo "ERROR: Tanzu Package Repository Configuration not found for the release ${TDH_TOOLS_CONTAINER_TYPE}/${TDH_TOOLS_CONTAINER_VERS}"
  echo "       => $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg"
  exit
fi

cmdLoop kubectl get secret -n default -o json > /tmp/output.yaml
if [ -s /tmp/output.yaml ]; then
  messageTitle "Helm Package Management"
  nam=$(jq -r --arg key "tanzu-demo-hub-tls" '.items[].metadata | select(.name == $key).name' /tmp/output.yaml)
  if [ "$nam" != "tanzu-demo-hub-tls" ]; then
    InstallCertManager
    createClusterIssuer
    getRootCA                    tanzu-demo-hub-tls
    cmdLoop helm delete cert-manager -n cert-manager > /dev/null
  fi
fi

messageTitle "Tanzu Package Management"
createNamespace $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE > /dev/null 2>&1
installTanzuPlugin package

if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
  ### deployTMC TDH_TKGMC_INFRASTRUCTURE is not set, code is not running through here, but kapp seams to work
  ### tkgCreateCluster
  installClusterEssentials
  TanzuPackage_AddRepo       $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE $TDH_SERVICE_PACKAGE_REPOSITORY_NAME $TDH_SERVICE_PACKAGE_REPOSITORY_ID
  TanzuPackage_RepoSync      $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE
else
  TanzuPackage_RepoSync      default
  #TanzuPackage_RepoSync     tanzu-package-repo-global
  #TanzuPackage_RepoSync     tkg-system
fi

TanzuPackage_CertManager    cert-manager-pkg     cert-manager.tanzu.vmware.com
TanzuPackage_Contour        contour-pkg          contour.tanzu.vmware.com
TanzuPackage_Harbor       harbor-pkg           harbor.tanzu.vmware.com

installBuildService          ## Tanzu Build Service (TBS)
installTanzuDataPostgres     ## Tanzu Data SQL
installSpringCloudGateway
installMinio                 ## Required for Tanzu PostgreSQL Demos
installKubeapps
installGitea
installJenkins
installArgoCD
installGitLab
installTAP                   ## Tanzu Application Platform (TAP)
installKubeernetesDashboard  ## Kubernetes Dashboard

TDH_TKGWC_NAME=${TDH_CLUSTER_NAME}
TDH_TKGWC_CONTEXT=${TDH_CLUSTER_NAME}-admin@${TDH_CLUSTER_NAME}

echo "-----------------------------------------------------------------------------------------------------------"
echo "Tanzu Kubernetes Grid Cluster ($TDH_TKGWC_NAME) build completed"
echo "-----------------------------------------------------------------------------------------------------------"
if [ "$NATIVE" == "0" ]; then
  printf "\e[1m1.) To access, set the cluster andthe context\e[0m\n"
  echo "       => tools/${TDH_TOOLS}.sh"
  echo "          tdh-tools:/$ kubectl config set-cluster ${TDH_TKGWC_NAME}"
  echo "          tdh-tools:/$ kubectl config use-context ${TDH_TKGWC_CONTEXT}"
  printf "\e[1m2.) Delete Cluster if not used anymore\e[0m\n"
  echo "       => tools/${TDH_TOOLS}.sh"
  echo "          tdh-tools:/$ tmc cluster delete -m $TDH_MANAGEMENT_CLUSTER -p $TDH_PROVISIONER_NAME $TDH_CLUSTER_NAME"
else
  echo "1.) To access, set the cluster andthe context"
  echo "    => kubectl config set-cluster ${TDH_TKGWC_NAME}"
  echo "    => kubectl config use-context ${TDH_TKGWC_CONTEXT}"
  echo "3.) Delete Cluster if not used anymore"
  echo "    => tmc cluster delete -m $TDH_MANAGEMENT_CLUSTER -p $TDH_PROVISIONER_NAME $TDH_CLUSTER_NAME"
fi

exit 0
