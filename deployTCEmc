#!/bin/bash
# ############################################################################################
# File: ........: deployTCEmc
# Language .....: bash 
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TCE Management Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0                ## NATIVE=1 r(un on local host), NATIVE=0 (run within docker)
export DEPLOY_TKG_CLEAN=0
export TDH_TOOLS=tdh-tools-tce
export TDH_TOOLS_CONTAINER_TYPE=tce

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

# --- CHECK FOR BASIC COMANDS ---
checkCLIcommands        BASIC

usage() {
  str=$(ls -1 $TDHPATH/files/tdh-tools/tdh-tools-tce-*.cfg | sed -e 's/^.*tools-tce-//g' -e 's/\.cfg//g' | paste - - | awk '{ printf("%s or %s\n", $1, $2) }')
  echo "USAGE: $0 [oprions] -d <deployment> -v <tkg-version>"
  echo "            Options:  -d <deployment.cfg>         # TKG Management Cluster Deployment Name"
  echo "                      -v <tkg-version>            # TKG Version (ie. $str)"
  echo ""
  echo "                      --delete                    # Delete Management Cluster and Jump Server"
  echo "                      --debug                     # default (disabled)"
  echo "                      --native                    # Use 'native' installed tools instead of the tdh-tools container"
}

while [ "$1" != "" ]; do
  case $1 in
    -d)            DEPLOY_TKG_TEMPLATE=$2;;
    -v)            DEPLOY_TKG_VERSION=$2;;
    --delete)      DEPLOY_TKG_CLEAN=1;;
    --debug)       DEBUG=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

if [ "${DEPLOY_TKG_TEMPLATE}" == "" ]; then
  listTCEmcDeployments
  usage; exit 0
fi

if [ "${DEPLOY_TKG_VERSION}" != "" ]; then
  if [ ! -f $TDHPATH/files/tdh-tools/tdh-tools-tce-${DEPLOY_TKG_VERSION}.cfg ]; then
    str=$(ls -1 $TDHPATH/files/tdh-tools/tdh-tools-tce-*.cfg | sed -e 's/^.*tools-tce-//g' -e 's/\.cfg//g' | paste - - | awk '{ printf("%s or %s\n", $1, $2) }')
    echo "ERROR: Unsuported TCE Release $DEPLOY_TKG_VERSION, ($str) are supported"
    exit 0
  fi
else
  echo "ERROR: Please specifiy option -v <tkg-version>"
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${TDHPATH}/deployments/${DEPLOY_TKG_TEMPLATE} ]; then
  echo "ERROR: Deployment file $DEPLOY_TKG_TEMPLATE can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${DEPLOY_TKG_TEMPLATE}
fi

#############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################
runTDHtools tce $DEPLOY_TKG_VERSION "Deploy TCE Management Cluster" "/home/tanzu/tanzu-demo-hub/$CMD_EXEC" "$CMD_ARGS"


export TDH_DEPLOYMENT_ENV_NAME=$TDH_TKGMC_INFRASTRUCTURE
export TKG_CONFIG=~/.tanzu-demo-hub/$TDH_TKGMC_CONFIG

cleanupEnvironment() {
  # --- CHECK FOR WORKLOAD CLUSTERS ---
  tanzu cluster list >/dev/null 2>&1; ret=$?
  if [ $ret -eq 0 ]; then
    cnt=$(tanzu cluster list 2>/dev/null | grep -v "tkgmc" | sed '1d' | wc -l | sed 's/  *//g') 
    if [ $cnt -gt 0 ]; then
      tanzu cluster list
      messageLine
      echo "ERROR: TCE Workload Clusters are still running, please delete them first."
      for n in $(tanzu cluster list | grep -v "tkgmc" | sed '1d' | awk '{ print $1 }'); do
        echo "       => tanzu cluster delete $n -y"
      done
      exit 1
    fi
  fi

  cleanKindCluster

  cnt=$(tanzu cluster list --include-management-cluster 2>/dev/null | grep -c " $TDH_TKGMC_NAME-$TDH_USER") 
  if [ $cnt -gt 0 ]; then 
    messageTitle "Deleting Management Cluster ($TDH_TKGMC_NAME-$TDH_USER)"
    if [ $DEBUG -gt 0 ]; then
      tanzu management-cluster delete ${TDH_TKGMC_NAME}-$TDH_USER -y; ret=$?
      messageLine
    else
      tanzu management-cluster delete ${TDH_TKGMC_NAME}-$TDH_USER -y > /dev/null 2>&1; ret=$?
    fi
    
    if [ $ret -ne 0 ]; then 
      echo "ERROR: failed to delete management cluster ($TDH_TKGMC_NAME-$TDH_USER)"
      if [ "$NATIVE" == "0" ]; then
        echo "    => tools/$TDH_TOOLS.sh"
        echo "       tdh-tools:/$ tanzu management-cluster delete $TDH_TKGMC_NAME-$TDH_USER -y"
        echo "       tdh-tools:/$ exit"
      else
        echo "    => tanzu management-cluster delete $TDH_TKGMC_NAME-$TDH_USER -y"
      fi
  
      exit 1
    fi
  fi

  if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "AWS" ]; then
    TERRAFORM_PATH=$HOME/.tanzu-demo-hub/terraform/aws
    if [ ! -d $TERRAFORM_PATH ]; then 
      mkdir -p $TERRAFORM_PATH
      cp -r ${TDHPATH}/terraform/aws $HOME/.tanzu-demo-hub/terraform
    fi

    TDH_TERRAFORM_TFVARS=$TERRAFORM_PATH/terraform_${TDH_TKGMC_ENVNAME}.tfvars
    TDH_TERRAFORM_TFSTATE=$TERRAFORM_PATH/terraform_${TDH_TKGMC_ENVNAME}.tfstate

    messageTitle "Deleting Jump Host (jump-${TDH_TKGMC_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN})"
     
    cnt=0; ret=1
    while [ $ret -ne 0 -a $cnt -lt 5 ]; do
      if [ $DEBUG -gt 0 ]; then
        terraform -chdir=${TERRAFORM_PATH} destroy -state=$TDH_TERRAFORM_TFSTATE \
                            -var-file=$TDH_TERRAFORM_TFVARS -auto-approve; ret=$?
        messageLine
      else
        terraform -chdir=${TERRAFORM_PATH} destroy -state=$TDH_TERRAFORM_TFSTATE \
                            -var-file=$TDH_TERRAFORM_TFVARS -auto-approve > /dev/null 2>&1; ret=$?
      fi
      [ $ret -eq 0 ] && break
      let cnt=cnt+1
      sleep 60
    done

    if [ $ret -ne 0 ]; then
      echo "ERROR: terraform destroy failed"
      if [ "$NATIVE" == "0" ]; then
        echo "    => tools/$TDH_TOOLS.sh"
        echo "       tdh-tools:/$ terraform -chdir=${TERRAFORM_PATH} destroy -state=$TDH_TERRAFORM_TFSTATE \\"
        echo "                       -var-file=$TDH_TERRAFORM_TFVARS -auto-approve"
        echo "       tdh-tools:/$ exit"
      else
        echo "       => terraform -chdir=${TERRAFORM_PATH} destroy -state=$TDH_TERRAFORM_TFSTATE \\"
        echo "                    -var-file=$TDH_TERRAFORM_TFVARS -auto-approve"
      fi

      exit 1
    fi
  fi
}

checkKeyPairs() {
  messageTitle "SSH Key Pairs"

  if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "Azure" ]; then
    if [ ! -f ~/.tanzu-demo-hub/KeyPair-Azure.pem ]; then 
      # GENERATE INGRES FILES
      rm -f ~/.tanzu-demo-hub/KeyPair-Azure.pem ~/.tanzu-demo-hub/KeyPair-Azure.pub
      ssh-keygen -t rsa -b 4096 -f ~/.tanzu-demo-hub/KeyPair-Azure -P "" > /dev/null 2>&1
      mv ~/.tanzu-demo-hub/KeyPair-Azure ~/.tanzu-demo-hub/KeyPair-Azure.pem
#    else
      # COMPATE KEYS
      #LOCALSSH=$(cat ~/.tanzu-demo-hub/KeyPair-Azure.pub | base64 | tr -d ‘\r\n’)
      #CONFIGSSH=$(egrep "^AZURE_SSH_PUBLIC_KEY_B64:" ${TDHPATH}/config/${TDH_TKGMC_CONFIG} | awk '{ print $2 }')

      #if [ "${LOCALSSH} != ${CONFIGSSH}" ]; then
      #  gsed -i "s/^\(AZURE_SSH_PUBLIC_KEY_B64:\) .*$/\1 $LOCALSSH/g" ${TDHPATH}/config/${TDH_TKGMC_CONFIG}
      #fi
    fi
  fi

  if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "AWS" ]; then
    SSH_KEY_NAME=tanzu-demo-hub
    SSH_KEY_FILE=$HOME/.tanzu-demo-hub/KeyPair-${SSH_KEY_NAME}-${AWS_REGION}.pem
    messagePrint " ▪ KeyPair Name" "$SSH_KEY_NAME"
    messagePrint " ▪ KeyPair File" "$SSH_KEY_FILE"

    # --- GENERATING KEY PAIR ---
    if [ ! -f $SSH_KEY_FILE ]; then 
      messagePrint " ▪ Generating KeyPair" "SSH_KEY_FILE"
      aws ec2 --region=$AWS_REGION delete-key-pair --key-name $SSH_KEY_NAME > /dev/null 2>&1
      aws ec2 --region=$AWS_REGION create-key-pair --key-name $SSH_KEY_NAME | \
         jq -r '.KeyMaterial' > $SSH_KEY_FILE
      chmod 600 $SSH_KEY_FILE
    fi

    if [ ! -d ~/.tanzu-demo-hub ] ; then mkdir ~/.tanzu-demo-hub; fi
  
    # --- VERIFY KEY-PAIR ---
    key=$(aws ec2 --region=$AWS_REGION describe-key-pairs | \
          jq -r --arg key "$SSH_KEY_NAME" '.KeyPairs[] | select(.KeyName == $key).KeyFingerprint')
  
    # --- CREATE ONE IF IT DOES NOT EXIST ---
    if [ "${key}" == "" ]; then 
      aws ec2 --region=$AWS_REGION create-key-pair --key-name $SSH_KEY_NAME | \
         jq -r '.KeyMaterial' > $SSH_KEY_FILE
      chmod 600 $SSH_KEY_FILE
      key=$(aws ec2 --region=$AWS_REGION describe-key-pairs | \
            jq -r --arg key "$SSH_KEY_NAME" '.KeyPairs[] | select(.KeyName == $key).KeyFingerprint')
    fi

    if [ -f "${SSH_KEY_FILE}" ]; then
      # openssl pkcs8 -in $SSH_KEY_FILE -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c
      # Linux: (stdin)= 60:db:70:2a:ce:0a:c1:ed:79:07:1c:be:9b:18:51:e9:78:84:7f:17
      # MAC:   60:db:70:2a:ce:0a:c1:ed:79:07:1c:be:9b:18:51:e9:78:84:7f:17
      if [ "$(uname)" == "Linux" ]; then 
        kfp=$(openssl pkcs8 -in $SSH_KEY_FILE -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c | awk '{ print $2 }')
      else
        kfp=$(openssl pkcs8 -in $SSH_KEY_FILE -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c)
      fi
    
      messagePrint " ▪ Verify KeyPair Fingerpring" "$kfp"
      if [ "${key}" != "${kfp}" ]; then
        messagePrint " ▪ KeyPair Fingerpring not valid, regenerating" "$SSH_KEY_NAME"
        aws ec2 --region=$AWS_REGION delete-key-pair --key-name $SSH_KEY_NAME > /dev/null
        aws ec2 --region=$AWS_REGION create-key-pair --key-name $SSH_KEY_NAME | \
           jq -r '.KeyMaterial' > $SSH_KEY_FILE
        chmod 600 $SSH_KEY_FILE
      fi
    fi
  fi
}

# --- VERYFY ACCESS TO CLOUD ---
checkTDHenvironment

# --- VERIFY TOOLS AND ACCESS ---
checkCloudCLI
checkCLIcommands TOOLS
checkCLIcommands TKG
checkCLIcommands TANZU
checkCLIcommands TMC
checkCLIcommands VSPHERE

if [ "$DEPLOY_TKG_CLEAN" -eq 1 ]; then
  cleanupEnvironment
  cleanManagementCluster
  cleanKubeconfig $HOME/.kube/config
  cleanKubeconfig $HOME/.kube-tkg/config

  exit 0
fi

# --- INSTALL TANZU PLUGINS ---
installTanzuPlugins

# --- CLEANUP KUNECONFIG ---
cleanKubeconfig
checkTDHAccess
checkCloudAccess

#checkTMCAccess
#checkTKGdownloads
tmcCheckLogin
checkIdentityProvider

# --- SET MANAGEMENT CLUSTER NAME ---
TDH_TKGMC_NAME=${TDH_TKGMC_NAME}-${TDH_USER}

if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "docker" ]; then
  TKG_KUBECONFIG=${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.kubeconfig; rm -f $TKG_KUBECONFIG

  #########################################################################################################################
  ############################## TANZU COMMNUNITY EDITION MANAGEMENT CLUSTER ON DOCKER ####################################
  #########################################################################################################################

  cnt=$(tanzu management-cluster get 2>/dev/null | grep -c " $TDH_TKGMC_NAME ")
  if [ $cnt -eq 0 ]; then
    # --- CLEANUP KUNECONFIG ---
    cleanupEnvironment
    cleanManagementCluster
    cleanKubeconfig $HOME/.kube/config
    cleanKubeconfig $HOME/.kube-tkg/config
    
    # --- CLEANUP TANZU CONFIG ---
    rm -f $HOME/.config/tanzu/config.yaml

    createTKGMCcluster

    tanzu management-cluster kubeconfig get --admin > /dev/null 2>&1
    kubectl config set-cluster $TDH_TKGMC_NAME > /dev/null 2>&1
    kubectl config use-context ${TDH_TKGMC_NAME}-admin@$TDH_TKGMC_NAME > /dev/null 2>&1
  fi

echo gaga1
  if [ ! -f TKG_KUBECONFIG ]; then 
echo gaga2
    tanzu management-cluster kubeconfig get --admin --export-file=${TKG_KUBECONFIG} > /dev/null 2>&1; ret=$?
    if [ ${ret} -ne 0 ]; then
      echo "ERROR: failed to export kubeconfig"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ tanzu management-cluster kubeconfig get --admin --export-file=${TKG_KUBECONFIG}"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => tanzu management-cluster kubeconfig get --admin --export-file=${TKG_KUBECONFIG}"
      fi
      exit 1
    fi
  fi

# TMC Registation does not yet work with TCE
if [ 1 -eq 2 ]; then
  # --- VERIFY TMC REGISTRATION
  tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    #tmc managementcluster get aws-hosted -o json | jq -r '.status.phase'
    stt=$(tmc managementcluster get $TDH_TKGMC_NAME -o json 2>/dev/null | jq -r '.status.phase')
    if [ "$stt" != "READY" ]; then
      messagePrint " ▪ TMC DeRegister Cluster"             "$TDH_TKGMC_NAME"
      #tmc managementcluster deregister $TDH_TKGMC_NAME -k $HOME/.kube/config -f > /tmp/error.log 2>&1; ret=$?
      tmc managementcluster deregister $TDH_TKGMC_NAME -k $HOME/.kube/config > /tmp/error.log 2>&1; ret=$?
      if [ $ret -ne 0 ]; then
        logMessages /tmp/error.log
        echo "ERROR: failed to deregister Management Cluster $TDH_TKGMC_NAME, please try manually"
        if [ "$NATIVE" == "0" ]; then
          echo "       => tools/${TDH_TOOLS}.sh"
          echo "          tdh-tools:/$ tmc managementcluster deregister $TDH_TKGMC_NAME -k $HOME/.kube/config -f"
          echo "          tdh-tools:/$ exit"
        else
          echo "       => tmc managementcluster deregister $TDH_TKGMC_NAME -k $HOME/.kube/config -f"
        fi

        exit 1
      fi
    fi
  fi

  tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    messagePrint " ▪ TMC Register Cluster"             "$TDH_TKGMC_NAME"

    ret=1; cnt=0
    while [ $ret -ne 0 -a $cnt -lt 5 ]; do
      tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG --kubeconfig=$HOME/.kube-tkg/config > /tmp/error.log 2>&1; ret=$?
      if [ $ret -eq 0 ]; then 
        tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1; ret=$?
        if [ $ret -eq 0 ]; then break; else ret=1; fi
      fi
      sleep 30
      let cnt=cnt+1
    done

    if [ $ret -ne 0 ]; then
      logMessages /tmp/error.log
      echo "ERROR: failed to register TKG Management Cluster: $TDH_TKGMC_NAME to TMC"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG -k $HOME/.kube-tkg/config"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG -k $HOME/.kube-tkg/config"
      fi

      exit 1
    fi

    cnt=0; stt="PENDING"
    while [ "$stt" != "READY" -a $cnt -lt 10 ]; do
      stt=$(tmc managementcluster get $TDH_TKGMC_NAME -o json | jq -r '.status.phase')
      sleep 60

      let cnt=cnt+1
    done
  fi
fi

  # --- CLEANUP OLD MANAGEMENT CLUSTERS ---
  #cleanKubeconfig $HOME/.tanzu/config.yaml  => cleanManagementCluster

else

  #########################################################################################################################
  ############################## TANZU KUBERNETS GRID FOR AWS, AZURE AND VPSHERE (TKGm) ###################################
  #########################################################################################################################

  cnt=$(tanzu management-cluster get 2>/dev/null | grep -c " $TDH_TKGMC_NAME ")
  if [ $cnt -eq 0 ]; then
    # --- ACCEPT LICENSE AGREEMENT ---
    if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "Azure" ]; then
      messageTitle "Accepting Image Terms for Provider (vmware-inc) / Offer: (tkg-capi)"

      for img in $(az vm image list --publisher vmware-inc --offer tkg-capi --all | jq -r '.[].urn' | \
                   grep -v "2020" | awk -F: '{ printf("%s:%s:%s\n",$1,$2,$3)}' | sort | uniq); do
        stt=$(az vm image terms show --urn $img:latest | jq -r '.accepted')
  
        if [ "$stt" != "true" ]; then 
          messagePrint " ▪ Accepting Image Terms for image ($img)" "$img"

          cnt=0; ret=1
          while [ $ret -ne 0 -a $cnt -lt 5 ]; do
            #az vm image terms accept --urn $img > /dev/null 2>&1; ret=$?
            az vm image terms accept --urn $img:latest; ret=$?
            [ $ret -eq 0 ] && break
            let cnt=cnt+1
            sleep 30
          done

          if [ $ret -ne 0 ]; then 
            echo "ERROR: failed to accept image terms after $cnt tries, please try manually"
            echo "       => az vm image terms accept --urn $img:latest"
            exit
          fi
        fi
      done
    fi

    # --- VERIFY IF DOCKER IS RUNNING ---
    if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "vSphere" ]; then
      docker ps > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR: Docker Daemon not running"; exit
        exit 1
      fi
    fi

    # --- CREATE MANAGEMENT CLUSTER ---
    [ ! -d ~/.tanzu-demo-hub/config ] && mkdir -p ~/.tanzu-demo-hub/config
    $SSH_COMMAND -n "[ -f $SSH_HOME/tanzu-demo-hub/scripts/InstallTKGmc.sh ] && tanzu-demo-hub/scripts/InstallTKGmc.sh \"$DEPLOY_TKG_TEMPLATE\" \"$TDH_TKGMC_NAME\" \"$DEBUG\""; ret=$?
    if [ ${ret} -ne 0 ]; then
      echo "ERROR: Failed to deploy Management Server on $JUMP_HOST"
      echo "       => $SSH_DISPLAY -n tanzu-demo-hub/scripts/InstallTKGmc.sh \"$DEPLOY_TKG_TEMPLATE\" \"$DEBUG\""
      exit
    fi

    cleanKubeconfig
    cleanManagementCluster

    # --- LOGIN ---
    tanzu login --server $TDH_TKGMC_NAME > /dev/null 2>&1

    cnt=$(tanzu management-cluster get 2>/dev/null | grep -c " $TDH_TKGMC_NAME ")
    if [ $cnt -eq 0 ]; then
      $SCP_COMMAND ${SSH_USER}@${SSH_HOST}:$SSH_HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.kubeconfig ~/.tanzu-demo-hub/config > /dev/null 2>&1
      $SCP_COMMAND ${SSH_USER}@${SSH_HOST}:$SSH_HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml ~/.tanzu-demo-hub/config > /dev/null 2>&1

      # --- UNCOMMENT FOR DEBUGGING ---
      #echo "tanzu login --kubeconfig ~/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.kubeconfig \
      #  --name $TDH_TKGMC_NAME --server $TDH_TKGMC_NAME --context ${TDH_TKGMC_NAME}-admin@$TDH_TKGMC_NAME"

      tanzu login --kubeconfig ~/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.kubeconfig  --name $TDH_TKGMC_NAME --server $TDH_TKGMC_NAME \
         --context ${TDH_TKGMC_NAME}-admin@$TDH_TKGMC_NAME > /dev/null 2>&1
      tanzu login --server $TDH_TKGMC_NAME > /dev/null 2>&1
      tanzu management-cluster get > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR: failed to login to TCE Management Cluster: ${TDH_TKGMC_NAME}.kubeconfig"
        echo "       => tanzu login --kubeconfig ~/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.kubeconfig  \\"
        echo "            --name $TDH_TKGMC_NAME --server $TDH_TKGMC_NAME \\"
        echo "            --context ${TDH_TKGMC_NAME}-admin@$TDH_TKGMC_NAME"
        echo "       => tanzu login --server $TDH_TKGMC_NAME"
        echo "       => tanzu management-cluster get"
        exit
      fi
    fi

    tanzu management-cluster kubeconfig get --admin > /dev/null 2>&1
    kubectl config set-cluster $TDH_TKGMC_NAME > /dev/null 2>&1
    kubectl config use-context ${TDH_TKGMC_NAME}-admin@$TDH_TKGMC_NAME > /dev/null 2>&1
  fi
fi

if [ 1 -eq 2 ]; then
  # --- VERIFY TMC REGISTRATION
  tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    #tmc managementcluster get aws-hosted -o json | jq -r '.status.phase'
    stt=$(tmc managementcluster get $TDH_TKGMC_NAME -o json 2>/dev/null | jq -r '.status.conditions.READY.status') 
    if [ "$stt" == "FALSE" ]; then 
      messagePrint " ▪ TMC ReRegister Cluster"             "$TDH_TKGMC_NAME"
      tmc managementcluster reregister $TDH_TKGMC_NAME -o /tmp/k8s-register-manifest.yaml > /dev/null 2>&1; ret=$?
      if [ $ret -eq 0 ]; then
        kubectl apply -f /tmp/k8s-register-manifest.yaml > /dev/null 2>&1; ret=$?
        if [ $ret -eq 0 ]; then
          messagePrint " ▪ TMC ReRegister Cluster failed, deregister"             "$TDH_TKGMC_NAME"
          tmc managementcluster deregister $TDH_TKGMC_NAME > /dev/null 2>&1
        fi
      fi
    fi
  fi

  tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    messagePrint " ▪ TMC Register Cluster"             "$TDH_TKGMC_NAME"

    ret=1; cnt=0
    while [ $ret -ne 0 -a $cnt -lt 5 ]; do
      tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG --kubeconfig=$HOME/.kube/config > /tmp/error.log 2>&1; ret=$?
      if [ $ret -eq 0 ]; then
        tmc managementcluster get $TDH_TKGMC_NAME > /dev/null 2>&1; ret=$?
        if [ $ret -eq 0 ]; then break; else ret=1; fi
      fi
      sleep 30
      let cnt=cnt+1
    done

    if [ $ret -ne 0 ]; then
      logMessages /tmp/error.log
      echo "ERROR: failed to register TKG Management Cluster: $TDH_TKGMC_NAME to TMC"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG -k $HOME/.kube/config"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => tmc managementcluster register $TDH_TKGMC_NAME -c tanzu-demo-hub -p TKG -k $HOME/.kube/config"
      fi

      exit 1
    fi

    cnt=0; stt="PENDING"
    while [ "$stt" != "READY" -a $cnt -lt 10 ]; do
      stt=$(tmc managementcluster get $TDH_TKGMC_NAME -o json | jq -r '.status.phase')
      sleep 60

      let cnt=cnt+1
    done
  fi
fi

  # --- CLEANUP OLD MANAGEMENT CLUSTERS ---
  #cleanKubeconfig $HOME/.tanzu/config.yaml  => cleanManagementCluster

  messageTitle "Create the TCE Management Cluster deployment File"
  messagePrint " ▪ TCE Deployment File"          "$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml"
  messagePrint " ▪ TDH Configuration"            "$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg"
  messagePrint " ▪ Management Cluster"           "$TDH_TKGMC_NAME"
  messagePrint " ▪ Cloud Infrastructure"         "$TDH_DEPLOYMENT_ENV_NAME"

  mkdir -p $HOME/.tanzu/tkg/clusterconfigs

  DEPLOYMENT_FILE=${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg
  TKG_WC_CONFIG_DEV="$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}-wc-dev.yaml"
  TKG_WC_CONFIG_PRD="$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}-wc-prod.yaml"
  TKG_MC_CONFIG="$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml"

  TMC_CONFIG_NAME="$(echo ${TDH_TKGMC_NAME} | sed 's/tcemc/tmc/g')"
  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/${TMC_CONFIG_NAME}.cfg"

  echo "TDH_TKGMC_INFRASTRUCTURE=$TDH_DEPLOYMENT_ENV_NAME"               >  $DEPLOYMENT_FILE
  echo "TDH_TKGMC_NAME=$TDH_TKGMC_NAME"                                  >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_ENVNAME=$TDH_TKGMC_ENVNAME"                            >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_TMC_CONFIG=${TMC_CONFIG_NAME}.cfg"                     >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_CONFIG=${TDH_TKGMC_NAME}.yaml"                         >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_WC_CONFIG_DEV=${TDH_TKGMC_NAME}-wc-dev.yaml"           >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_WC_CONFIG_PROD=${TDH_TKGMC_NAME}-wc-prod.yaml"         >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_KUBECONFIG=${TDH_TKGMC_NAME}.kubeconfig"               >> $DEPLOYMENT_FILE
  echo "TDH_TKGMC_TOOLS_CONTAINER=${TDH_TOOLS}"                          >> $DEPLOYMENT_FILE


  #echo "TDH_TKGMC_PLAN=dev"                                             >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_CEIP_PARTICIPATION=true"                              >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_CNI=antrea"                                           >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_LOGLEVEL=1"                                           >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_SERVICE_CIDR=100.64.0.0/13"                           >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_CLUSTER_CIDR=100.96.0.0/11"                           >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_MACHINE_HEALTH_CHECK_ENABLED=true"                    >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_MACHINE_TYPE=Standard_D2s_v3"                         >> $DEPLOYMENT_FILE
  #echo "TDH_TKGMC_CONTROL_PLANE_MACHINE_TYPE=Standard_D2s_v3"           >> $DEPLOYMENT_FILE

  messageTitle "Create config file for TCE Workload Clusters"
  messagePrint " ▪ Deployment File (dev)"      "~/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-dev.yaml"
  messagePrint " ▪ Deployment File (prod)"     "~/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-prod.yaml"

  # --- CONFIG FOR PROD AND DEV ---
  idp=$(egrep "^IDENTITY_MANAGEMENT_TYPE:" $TKG_MC_CONFIG | awk '{ print $NF }')
  echo "CLUSTER_PLAN: dev"             >  $TKG_WC_CONFIG_DEV
  echo "CLUSTER_PLAN: prod"            >  $TKG_WC_CONFIG_PRD

  if [ "$TDH_DEPLOYMENT_ENV_NAME" == "AWS" ]; then
    var_aws_1="AWS_REGION:|AWS_NODE_AZ:|AWS_ACCESS_KEY_ID:|AWS_SECRET_ACCESS_KEY:|AWS_SSH_KEY_NAME:|AWS_AMI_ID:"
    var_aws_2="CONTROL_PLANE_MACHINE_TYPE:|NODE_MACHINE_TYPE:"

    egrep "$var_aws_1|$var_aws_2" $TKG_MC_CONFIG     >> $TKG_WC_CONFIG_PRD
    egrep "$var_aws_1|$var_aws_2" $TKG_MC_CONFIG     >> $TKG_WC_CONFIG_DEV
  fi

  if [ "$TDH_DEPLOYMENT_ENV_NAME" == "vSphere" ]; then
    var_azure_1="AZURE_TENANT_ID:|AZURE_CLIENT_ID:|AZURE_CLIENT_SECRET:|AZURE_SSH_PUBLIC_KEY_B64:|AZURE_CONTROL_PLANE_MACHINE_TYPE:"
    var_azure_2="AZURE_LOCATION:|AZURE_NODE_MACHINE_TYPE:|AZURE_SUBSCRIPTION_ID:"

    egrep "VSPHERE" $TKG_MC_CONFIG | egrep -v "VSPHERE_CONTROL_PLANE_ENDPOINT"     >> $TKG_WC_CONFIG_PRD
    egrep "VSPHERE" $TKG_MC_CONFIG | egrep -v "VSPHERE_CONTROL_PLANE_ENDPOINT"     >> $TKG_WC_CONFIG_DEV
  fi

  if [ "$TDH_DEPLOYMENT_ENV_NAME" == "Azure" ]; then 
    var_azure_1="AZURE_TENANT_ID:|AZURE_CLIENT_ID:|AZURE_CLIENT_SECRET:|AZURE_SSH_PUBLIC_KEY_B64:|AZURE_CONTROL_PLANE_MACHINE_TYPE:"
    var_azure_2="AZURE_LOCATION:|AZURE_NODE_MACHINE_TYPE:|AZURE_SUBSCRIPTION_ID:"

    egrep "$var_azure_1|$var_azure_2" $TKG_MC_CONFIG     >> $TKG_WC_CONFIG_PRD
    egrep "$var_azure_1|$var_azure_2" $TKG_MC_CONFIG     >> $TKG_WC_CONFIG_DEV
  fi
    
  if [ "$idp" == "ldap" ]; then
    var_ldap="LDAP_HOST:|LDAP_GROUP_SEARCH_NAME_ATTRIBUTE:|LDAP_GROUP_SEARCH_USER_ATTRIBUTE:|LDAP_USER_SEARCH_USERNAME:"

    egrep "$var_ldap" $TKG_MC_CONFIG >> $TKG_WC_CONFIG_PRD
    egrep "$var_ldap" $TKG_MC_CONFIG >> $TKG_WC_CONFIG_DEV
  fi

  if [ "$idp" == "oidc" ]; then
    egrep "^OIDC_|IDENTITY_MANAGEMENT_TYPE" $TKG_MC_CONFIG >> $TKG_WC_CONFIG_DEV
    egrep "^OIDC_|IDENTITY_MANAGEMENT_TYPE" $TKG_MC_CONFIG >> $TKG_WC_CONFIG_PRD
  fi

  [ "${TDH_DEPLOYMENT_ENV_NAME}" == "vSphere" ] && CLOUD="vsphere"
  [ "${TDH_DEPLOYMENT_ENV_NAME}" == "Azure" ] && CLOUD="azure"
  [ "${TDH_DEPLOYMENT_ENV_NAME}" == "AWS" ] && CLOUD="aws"
  [ "${TDH_DEPLOYMENT_ENV_NAME}" == "docker" ] && CLOUD="docker"
  
  echo "-----------------------------------------------------------------------------------------------------------"
  #$SSH_COMMAND -n "tanzu management-cluster get 2>/dev/null | sed -n '/^  NAME /,/^NAME/p' | egrep -v \"^NAME\" "
  tanzu config server list 
  echo "-----------------------------------------------------------------------------------------------------------"
  printf "\e[1m1.) Check Management Cluster Status\e[0m\n"
  if [ "$NATIVE" == "0" ]; then
    echo "    => tools/$TDH_TOOLS"
    printf "       %-80s %s\n" "tdh-tools:/$ kubectl config set-cluster ${TDH_TKGMC_NAME}" "# Set k8s Context to mc Cluster"
    printf "       %-80s %s\n" "tdh-tools:/$ kubectl config set-context ${TDH_TKGMC_NAME}-admin@${TDH_TKGMC_NAME}" "# Set k8s Context to mc Cluster"
    printf "       %-80s %s\n" "tdh-tools:/$ kubectl get cluster --all-namespaces" "# Set k8s Context to the TCE Management Cluster"
    printf "       %-80s %s\n" "tdh-tools:/$ kubectl get kubeadmcontrolplane,machine,machinedeployment --all-namespaces" "# To verify the first control plane is up"
    printf "       %-80s %s\n" "tdh-tools:/$ tanzu login --server $TDH_TKGMC_NAME" "# Show Tanzu Management Cluster"
    printf "       %-80s %s\n" "tdh-tools:/$ tanzu management-cluster get" "# Show Tanzu Management Cluster"
  else
    echo "    => tanzu management-cluster get"
    printf "    => %-80s %s\n" "kubectl config set-cluster ${TDH_TKGMC_NAME}" "# Set k8s Context to mc Cluster"
    printf "    => %-80s %s\n" "kubectl config set-context ${TDH_TKGMC_NAME}-admin@${TDH_TKGMC_NAME}" "# Set k8s Context to mc Cluster"
    printf "    => %-80s %s\n" "kubectl get cluster --all-namespaces" "# Set k8s Context to the TCE Management Cluster"
    printf "    => %-80s %s\n" "kubectl get kubeadmcontrolplane,machine,machinedeployment --all-namespaces" "# To verify the first control plane is up"
    printf "    => %-80s %s\n" "tanzu login --server $TDH_TKGMC_NAME" "# Show Tanzu Management Cluster"
    printf "    => %-80s %s\n" "tanzu management-cluster get" "# Show Tanzu Management Cluster"
  fi
  
  if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "vSphere" ]; then

    printf "\e[1m2.) Ceeate TCE Workload Cluster\e[0m\n"
    echo "    TCE Workload Cluster 01 ...............................: NAME_TAG: TKG_CLUSTER_01"
    echo "        Cluster Control Plane .............................: $VSPHERE_TKGM_WKLD_CLUSTER01_CONTROL_PLANE"
    echo "        LoadBalancer IP Pool ..............................: $VSPHERE_TKGM_WKLD_CLUSTER01_LOADBALANCER_POOL"
    echo "    TCE Workload Cluster 02 ...............................: NAME_TAG: TKG_CLUSTER_02"
    echo "        Cluster Control Plane .............................: $VSPHERE_TKGM_WKLD_CLUSTER02_CONTROL_PLANE"
    echo "        LoadBalancer IP Pool ..............................: $VSPHERE_TKGM_WKLD_CLUSTER02_LOADBALANCER_POOL"
    echo "    TCE Workload Cluster 03 ...............................: NAME_TAG: TKG_CLUSTER_03"
    echo "        Cluster Control Plane .............................: $VSPHERE_TKGM_WKLD_CLUSTER03_CONTROL_PLANE"
    echo "        LoadBalancer IP Pool ..............................: $VSPHERE_TKGM_WKLD_CLUSTER03_LOADBALANCER_POOL"
    echo ""

    if [ "$NATIVE" == "0" ]; then
      echo "    => tools/$TDH_TOOLS"
      echo "       tdh-tools:/$ export CLUSTER_NAME=<cluster_name>                   ## Workload Cluster Name"
      echo "       tdh-tools:/$ export VSPHERE_CONTROL_PLANE_ENDPOINT=<ip-address>   ## Control Plane IP Adress for the worklaod Cluster"
      echo "       tdh-tools:/$ tanzu cluster create -f \$HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-dev.yaml --tkr v1.20.4---vmware.3-tkg.1"
      echo "       tdh-tools:/$ tanzu cluster create -f \$HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-prod.yaml"
      echo "       tdh-tools:/$ tanzu cluster kubeconfig get \$CLUSTER_NAME --admin"
      echo "       tdh-tools:/$ kubectl config use-context \${CLUSTER_NAME}-admin@\$CLUSTER_NAME"
      echo "       tdh-tools:/$ tanzu cluster list --include-management-cluster"
      echo "       tdh-tools:/$ tanzu cluster delete \$CLUSTER_NAME -y"
      echo "       tdh-tools:/$ exit"
    else
      echo "    => export CLUSTER_NAME=<cluster_name>                   ## Workload Cluster Name"
      echo "    => export VSPHERE_CONTROL_PLANE_ENDPOINT=<ip-address>   ## Control Plane IP Adress for the worklaod Cluster"
      echo "    => tanzu cluster create -f \$HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-dev.yaml --tkr v1.20.4---vmware.3-tkg.1"
      echo "    => tanzu cluster create -f \$HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-prod.yaml"
      echo "    => tanzu cluster kubeconfig get \$CLUSTER_NAME --admin"
      echo "    => kubectl config use-context \${CLUSTER_NAME}-admin@\$CLUSTER_NAME"
      echo "    => tanzu cluster list --include-management-cluster"
      echo "    => tanzu cluster delete \$CLUSTER_NAME -y"
    fi
  else
    rel=$(tanzu kubernetes-release get | tail -2 | head -1 | awk '{ print $1 }')
    printf "\e[1m2.) Ceeate TCE Workload Cluster\e[0m\n"
    if [ "$NATIVE" == "0" ]; then
      echo "    => tools/$TDH_TOOLS.sh"
      echo "       tdh-tools:/$ export CLUSTER_NAME=<workload_cluster_name>"
      echo "       tdh-tools:/$ tanzu kubernetes-release get"
      echo "       tdh-tools:/$ tanzu cluster create -f \$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml --tkr $rel \$CLUSTER_NAME"
      echo "       tdh-tools:/$ tanzu cluster create -f \$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml \$CLUSTER_NAME"
      echo "       tdh-tools:/$ tanzu cluster kubeconfig get --admin \$CLUSTER_NAME"
      echo "       tdh-tools:/$ tanzu cluster list --include-management-cluster"
      echo "       tdh-tools:/$ exit"
    else
      echo "    => $ export CLUSTER_NAME=<workload_cluster_name>"
      echo "    => $ tanzu kubernetes-release get"
      echo "    => $ tanzu cluster create -f \$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml --tkr $rel \$CLUSTER_NAME"
      echo "    => $ tanzu cluster create -f \$HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml \$CLUSTER_NAME"
      echo "    => $ tanzu cluster kubeconfig get --admin \$CLUSTER_NAME"
      echo "    => $ tanzu cluster list --include-management-cluster"
    fi
  fi

  printf "\e[1m2.) Ceeate Tanzu Demo Hub (TDH) Workload Cluster with services (TBS, Harbor, Ingres etc.)\e[0m\n"
  if [ "${TDH_DEPLOYMENT_ENV_NAME}" == "vSphere" ]; then
    echo "    => ./deployTCE -d ${TDH_TKGMC_NAME}.cfg -c tkg-tanzu-demo-hub.cfg -n tdh-$CLOUD-$TDH_USER -tag TKG_CLUSTER_01"
    echo "    => ./deployTCE -d ${TDH_TKGMC_NAME}.cfg -c tkg-tanzu-demo-hub.cfg -n tdh-$CLOUD-$TDH_USER -tag TKG_CLUSTER_02 -k \"v1.17.16---vmware.2-tkg.1\""
  else
    for n in $(ls $TDHPATH/deployments/tce*.cfg); do
       file=$(echo $n | awk -F'/' '{ print $NF }') 
       echo "    => ./deployTCE -d ${TDH_TKGMC_NAME}.cfg -c $file"
    done

    e#cho "    => ./deployTCE -d ${TDH_TKGMC_NAME}.cfg -c tkg-tanzu-demo-hub.cfg -n tce-$CLOUD-$TDH_USER"
    #echo "    => ./deployTCE -d ${TDH_TKGMC_NAME}.cfg -d tkg-tanzu-demo-hub.cfg -n tce-$CLOUD-$TDH_USER -k \"v1.21.2+vmware.1\""
  fi

#tanzu cluster create tce-docker-sadubois -f /home/tce/.tanzu-demo-hub/config/tce-docker-sadubois.yaml --tkr v1.21.2---vmware.1-tkg.1

  printf "\e[1m3.) Delete the TCE Management Cluster\e[0m\n"
  if [ "$NATIVE" == "0" ]; then
    echo "    => tools/$TDH_TOOLS.sh"
    echo "       tdh-tools:/$ tanzu management-cluster delete $TDH_TKGMC_NAME -y"
    echo "       tdh-tools:/$ exit"
  else
    echo "    => tanzu management-cluster delete $TDH_TKGMC_NAME -y"
  fi
  echo ""
  echo "-----------------------------------------------------------------------------------------------------------"


exit

tanzu management-cluster create -y --file vs1.yaml 

exit
rm -rf $HOME/.config/tanzu
kind get clusters 2>/dev/null | xargs -n1 kind delete cluster --name > /dev/null 2>&1
docker rm -f $(docker ps -aq) > /dev/null 2>&1
docker rmi -f $(docker images -aq) > /dev/null 2>&1
docker system prune --all --volumes -f > /dev/null 2>&1



rm -f /home/tce/.config/tanzu/config.yaml
