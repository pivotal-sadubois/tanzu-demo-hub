#!/bin/bash
# ############################################################################################
# File: ........: deployMiniKube
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy K8S Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0                ## NATIVE=1 r(un on local host), NATIVE=0 (run within docker)
export K8S_CLEAN_DEPLOYMENT=false
export TDH_TOOLS=tdh-tools
export TDH_TOOLS_CONTAINER_TYPE=tkg

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

# --- CHECK FOR BASIC COMANDS ---
checkCLIcommands        BASIC

listMiniKubeDeployments() {
  printf "%-32s %-8s  %-15s %-20s %-5s %s\n" "DEPLOYMENT" "PLATFORM" "PROFILE" "MGMT-CLUSTER" "PLAN" "CONFIGURATION"
  echo "----------------------------------------------------------------------------------------------------------------"
  for deployment in $(ls -1 ${TDHPATH}/deployments/minikube*.cfg) ; do
    mcr=$(egrep "^TDH_MINIKUBE_PROFILE=" $deployment | awk -F= '{ print $NF }')

    dep=$(basename $deployment)

    printf "%-32s %-8s  %-15s %-20s %-5s %s\n" $dep minikube $mcr "n/a" "n/a" \
           "$TDH_TKGMC_CONFIG"
  done

}

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <deployment> [--clean|--debug]"
}

while [ "$1" != "" ]; do
  case $1 in
    -d)            K8S_DEPLOYMENT=$2;;
    --clean)       K8S_CLEAN_DEPLOYMENT=true;;
    --clean-cert)  K8S_CLEAN_CERTIFICATES=true;;
    --debug)       DEBUG=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

if [ "${K8S_DEPLOYMENT}" == "" ]; then
  listMiniKubeDeployments

  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${TDHPATH}/deployments/${K8S_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $K8S_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${K8S_DEPLOYMENT}
fi

InstallMetallb() {
  adr=$(kubectl get configmap config -n metallb-system -o json 2> /dev/null | jq -r '.data.config' | egrep "[0-9]-[0-9]" | awk '{ print $2 }') 
  stt=$(minikube addons -p $TDH_MINIKUBE_PROFILE list -o json | jq -r '."metallb".Status')
  if [ "$stt" != "enabled" -o "$adr" == "-" -o "$adr" == "" ]; then
    minikube_ip=$(minikube ip) 
    sip=$(echo 192.168.64.16 | awk -F'.' '{ printf("%d.%d.%d.100\n",$1,$2,$3) }')
    eip=$(echo 192.168.64.16 | awk -F'.' '{ printf("%d.%d.%d.120\n",$1,$2,$3) }')
    
    echo "   ----------------------------------------------------------------------------------------------------------------"
    echo "   WARNING: Please configure the minikube addon 'metallb' with an ip Pool. The minikube host"
    echo "            ip is ($minikube_ip), choose the IP Range in the same net. ie: "
    echo ""
    echo "            => minikube addons configure metallb -p $TDH_MINIKUBE_PROFILE"
    echo "               -- Enter Load Balancer Start IP: $sip"
    echo "               -- Enter Load Balancer End IP: $eip"
    #echo "            => minikube -p $TDH_MINIKUBE_PROFILE stop"
    #echo "            => minikube -p $TDH_MINIKUBE_PROFILE start"
    echo "  ----------------------------------------------------------------------------------------------------------------"
    echo "  Please restart $0 when completed, thanks"

    #echo "  => minikube addons configure metallb -p $TDH_MINIKUBE_PROFILE"
    #echo "  => kubectl describe configmap config -n metallb-system"
    exit
  else
    adr=$(kubectl get configmap config -n metallb-system -o json | jq -r '.data.config' | yq e '.address-pools[].addresses[]' -)
    messageTitle "Verify MetalLB Loadbalancer"
    messagePrint " ▪ Metallb LoadBalancer Status"         "active"
    messagePrint " ▪ Metallb LoadBalancer IP-Pool"        "$adr"

    # --- STORE CONFIG IN CONFIGMAP ---
    uodateConfigMap tanzu-demo-hub TDH_METALLB_ENABLED "true"
    uodateConfigMap tanzu-demo-hub TDH_METALLB_IPPOOL "$adr"

    if [ "${DEBUG}" == "1" ]; then
      echo "-----------------------------------------------------------------------------------------------------------"
      kubectl describe configmap config -n metallb-system
      echo "-----------------------------------------------------------------------------------------------------------"
    fi
  fi
}

cleanUPNamespace() {
  messagePrint " ▪ Delete Namespace" "$1"

  kubectl delete ns $1 >/dev/null 2>&1
}

export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

if [ "$K8S_CLEAN_CERTIFICATES" == "true" ]; then 
  messagePrint "Cleaning Let's Enscript Certificate request" "clusterissuer,certificate,order,challenge,CertificateRequest"
  kubectl delete clusterissuer,certificate,order,challenge,CertificateRequest --all > /dev/null 2>&1
  kubectl elete secret tanzu-demo-hub-tls $TDH_TLS_SECRET $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  kubectl delete secret -n cert-manager $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  exit
fi

if [ "$K8S_CLEAN_DEPLOYMENT" == "true" ]; then 
  messageTitle "Cleanup Minikube Namespaces and Obkects"
  cleanUPNamespace registry-harbor
  cleanUPNamespace cert-manager

  messagePrint " ▪ Delete ClusterIssuer" "$TDH_TLS_ISSUER_NAME"
  kubectl delete clusterissuer $TDH_TLS_ISSUER_NAME -n kube-system > /dev/null 2>&1
  #kubectl delete crd extensionservices.projectcontour.io 
  #kubectl delete crd httpproxies.projectcontour.io 
  #kubectl delete crd tlscertificatedelegations.projectcontour.io 

  # --- REMOVE CERTIFICATE ---
  kubectl delete Certificate $TDH_TLS_CERT > /dev/null 2>&1
  kubectl delete clusterissuer,certificate,order,challenge,CertificateRequest --all > /dev/null 2>&1
  kubectl delete secret -n cert-manager $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  # --- DELETE CONFIGURATION
  kubectl delete configmap tanzu-demo-hub > /dev/null 2>&1

  exit
fi

# --- SET MINIKUBE PROFILE ---
TDH_MINIKUBE_PROFILE="tdh-minikube-${TDH_USER}"
export KUBECONFIG=$HOME/.tanzu-demo-hub/config/$TDH_MINIKUBE_PROFILE.kubeconfig

# --- HARDCODED FOR MINIKUBE CLUSTER ---
TDH_MANAGEMENT_CLUSTER=attached
TDH_PROVISIONER_NAME=attached
TDH_CLUSTER_GROUP=tanzu-demo-hub
TDH_DEPLOYMENT_CLOUD=$TDH_INFRASTRUCTURE

# --- MINIKUBE SETUP ----
if [ ! -f /tdh_tools_docker_container  ]; then
  VerifyK8SDemoPlatform
  InstallMetallb
  #checkTDHAccess

  # --- CLEANUP KUBECONFIG ---
  cleanKubeconfig
  checkCloudAccess
fi

# --- SWITCH TO MINIKUBE CONTEXT ---
kubectl config use-context $TDH_MINIKUBE_PROFILE > /dev/null 2>&1
if [ $? -ne 0 ]; then 
  echo "ERROR0: Unable to switch to context $TDH_MINIKUBE_PROFILE"
  echo "       => kubectl config use-context $TDH_MINIKUBE_PROFILE"
  exit 1
fi

uodateConfigMap tanzu-demo-hub TDH_CLUSTER_NAME         $TDH_MINIKUBE_PROFILE
uodateConfigMap tanzu-demo-hub TDH_CLUSTER_GROUP        $TDH_CLUSTER_GROUP
uodateConfigMap tanzu-demo-hub TDH_MANAGEMENT_CLUSTER   attached
uodateConfigMap tanzu-demo-hub TDH_PROVISIONER_NAME     attached
uodateConfigMap tanzu-demo-hub TDH_DOMAIN               $AWS_HOSTED_DNS_DOMAIN 
uodateConfigMap tanzu-demo-hub TDH_ENVNAME              $TDH_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE      "minikube" 
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC       "false" 

############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################
runTDHtools "$TDH_TOOLS_CONTAINER_TYPE" "$TDH_TOOLS_CONTAINER_VERS" "Deploy MiniKube cluster" "$TDHPATH/$CMD_EXEC" "$CMD_ARGS"

# --- CLEANUP KUBECONFIG ---
checkTDHAccess
cleanKubeconfig

# --- SWITCH TO MINIKUBE CONTEXT ---
kubectl config use-context $TDH_MINIKUBE_PROFILE > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "1ERROR: Unable to switch to context $TDH_MINIKUBE_PROFILE"
  echo "       => kubectl config use-context $TDH_MINIKUBE_PROFILE"
  exit 1
fi

installClusterEssentials
TanzuPackage_AddRepo       $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE $TDH_SERVICE_PACKAGE_REPOSITORY_NAME $TDH_SERVICE_PACKAGE_REPOSITORY_ID
TanzuPackage_RepoSync      $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE

messageTitle "Tanzu Package Management"
TanzuPackage_RepoSync      tkg-system

TanzuPackage_CertManager   cert-manager-pkg     cert-manager.tanzu.vmware.com
TanzuPackage_Contour       contour-pkg          contour.tanzu.vmware.com

createClusterIssuer
getRootCA tanzu-demo-hub-tls
TanzuPackage_Harbor       harbor-pkg           harbor.tanzu.vmware.com

# --- INSTALL K8 SERVICES ---
installBuildService
installTanzuDataPostgres
installSpringCloudGateway
installMinio
installKubeapps
installGitea
installJenkins
installArgoCD

installTAP
exit

if [ "$TDH_TANZU_MISSION_CONTROL_REGISTRATION" == "true" ]; then 
  cnt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE -p $TDH_PROVISIONER_NAME -m $TDH_MANAGEMENT_CLUSTER 2> /dev/null | egrep -c " $TDH_MINIKUBE_PROFILE ")
  if [ $cnt -eq 0 ]; then
    messageTitle "Attach Minikube Cluster to TMC"
    messagePrint " ▪ TMC Cluster Name"                "$TDH_MINIKUBE_PROFILE"
    messagePrint " ▪ TMC Cluster Group"               "$TDH_CLUSTER_GROUP"
    messagePrint " ▪ TMC Managementcluster"           "$TDH_MANAGEMENT_CLUSTER"
    messagePrint " ▪ TMC Provisioner Name"            "$TDH_PROVISIONER_NAME"

    if [ $DEBUG -eq 0 ]; then 
      (cd /tmp; tmc cluster attach -n $TDH_MINIKUBE_PROFILE -g $TDH_CLUSTER_GROUP -p TDH_PROVISIONER_NAME > /dev/null 2>&1)
      kubectl apply -f /tmp/k8s-attach-manifest.yaml > /dev/null 2>&1
    else
      echo "  -------------------------------------------------------------------------------------------------------------------------------------------------------"
      (cd /tmp; tmc cluster attach -n $TDH_MINIKUBE_PROFILE -g $TDH_CLUSTER_GROUP -p TDH_PROVISIONER_NAME)
      kubectl apply -f /tmp/k8s-attach-manifest.yaml
      echo "  -------------------------------------------------------------------------------------------------------------------------------------------------------"
    fi

    stt="null"; cnt=0
    while [ "$stt" != "TRUE" -a $cnt -lt 5 ]; do
      stt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE  -p $TDH_PROVISIONER_NAME -m $TDH_MANAGEMENT_CLUSTER -o json | \
            jq -r '.clusters[].status.conditions."Agent-READY".status')
      [ "$stt" == "TRUE" ] && break
      sleep 60
      let cnt=cnt+1
    done

    if [ "$stt" != "TRUE" ]; then 
      echo "ERROR: TMC Integration failed, status is '$stt', please check manually"
      echo "       => tmc cluster list --name $TDH_MINIKUBE_PROFILE  -p $TDH_PROVISIONER_NAME -m $TDH_MANAGEMENT_CLUSTER -o json"
    fi
  else
    messageTitle "Verify TMC Integration"
    messagePrint " ▪ TMC Cluster Name"                "$TDH_MINIKUBE_PROFILE"
    messagePrint " ▪ TMC Cluster Group"               "$TDH_CLUSTER_GROUP"
    messagePrint " ▪ TMC Managementcluster"           "$TDH_MANAGEMENT_CLUSTER"
    messagePrint " ▪ TMC Provisioner Name"            "$TDH_PROVISIONER_NAME"

    stt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE  -p $TDH_PROVISIONER_NAME -m $TDH_MANAGEMENT_CLUSTER -o json | \
          jq -r '.clusters[].status.conditions."Agent-READY".status')
    if [ "$stt" != "TRUE" ]; then
      tmc cluster reattach --name $TDH_MINIKUBE_PROFILE -p $TDH_PROVISIONER_NAME -m $TDH_MANAGEMENT_CLUSTER -g $TDH_CLUSTER_GROUP > /dev/null 2>&1; ret=$?
      if [ $ret -ne 0 ]; then
        MGMT=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE | grep $TDH_MINIKUBE_PROFILE | awk '{ print $2 }')
        PROV=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE | grep $TDH_MINIKUBE_PROFILE | awk '{ print $3 }')

        tmc cluster delete $TDH_MINIKUBE_PROFILE -p $PROV -m $MGMT -f > /dev/null 2>&1; ret=$?
        if [ $ret -ne 0 ]; then
          echo "ERROR: TMC failed to attach cluster"
          echo "       => tmc cluster delete $TDH_MINIKUBE_PROFILE -p $TDH_PROVISIONER_NAME -m $TDH_TKGMC_NAME -g $TDH_CLUSTER_GROUP"
          exit 1
        fi

        # --- WAIT FOR THE CLUSTER TO BE DELETED ---
        cnt=1
        while [ $cnt -ne 0 ]; do
          cnt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE 2>/dev/null | grep -c $TDH_MINIKUBE_PROFILE)
          sleep 20
        done

        cnt=0
      fi  
    fi
  fi
fi

checkTMCintegration      TO    ## Tanzu Observability (Wavefront)
checkTMCintegration      TDP   ## Tanzu Data Protection
checkTMCintegration      TCI   ## Tanzu Cluster Inspection

echo ""
echo "-----------------------------------------------------------------------------------------------------------"
echo "Tanzu Kubernetes Grid Cluster ($TDH_MINIKUBE_PROFILE) build completed"
echo "-----------------------------------------------------------------------------------------------------------"
messageTitle "1.) Set KUBECONFIG and set the cluster context"
echo "    => export KUBECONFIG=/tmp/${TDH_MINIKUBE_PROFILE}.kubeconfig:~/.kube/config"
echo "    => minikube -p $TDH_MINIKUBE_PROFILE update-context"
echo "    => kubectl config use-context $TDH_MINIKUBE_PROFILE"
echo "    => kubectl config get-contexts"
messageTitle "2.) Relaxing Pod Security in cluster ($TDH_MINIKUBE_PROFILE)"
echo "    # Allow Privileged Pods for the Cluster"
echo "    => kubectl create clusterrolebinding tanzu-demo-hub-privileged-cluster-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated"
echo "    # Allow Privileged Pods for a Namespace (my-namespace)"
echo "    => kubectl create rolebinding tanzu-demo-hub-privileged-my-namespace-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated -n my-namespace"





