#!/bin/bash
# ############################################################################################
# File: ........: registerTDHenv 
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Register a TKG Management Cluster to TMC
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export TDH_TOOLS_CONTAINER_TYPE=tkg
export PROVIDER=""
unset TMC_MANAGEMENT_CLUSTER
unset KUBECONFIG

# --- PRESETUP ---
mkdir -p $HOME/.kube  $HOME/.tanzu-demo-hub/config $HOME/.tanzu-demo-hub/cache

if [ "$(hostname)" == "tdh-tools" ]; then
  export TDHPATH=/home/tanzu/tanzu-demo-hub
else
  export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
fi

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=""
export TMC_ENABLED=0

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

# --- CHECK FOR BASIC COMANDS ---
checkCLIcommands        BASIC

DEPLOY_TKG_VERSION=$(ls -1 $TDHPATH/files/tdh-tools/tdh-tools-tkg-*.cfg | sed -e 's/^.*tools-tkg-//g' -e 's/\.cfg//g' | tail -1) 

# Create an Account Credential for EKS Cluster Lifecycle Management
# https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/services/tanzumc-using/GUID-49DD2889-777E-4C28-8255-C0607E861001.html
# eks-tmc-cloud-vmware-com-644184825571111404 ## CloudFormation Stack / Credential Name: sadubois-aws-eks / 
# Account credential: eks-sadubois ## AWS account for EKS cluster lifecycle management


usage() {
  str=$(ls -1 $TDHPATH/files/tdh-tools/tdh-tools-tkg-*.cfg | sed -e 's/^.*tools-tkg-//g' -e 's/\.cfg//g' | paste - - | awk '{ printf("%s or %s\n", $1, $2) }')
  echo ""
  echo "USAGE: $0 [-p <provider> [options] [-debug|-clean]"
  echo "           Options:  -p <provider>                     # Tanzu Mission Control (TMC) Provider (VSPHERE_TKGS, AWS_EKS, AZURE_AKS)"
  echo "                     -d [\"description\"]                # Optional - Provide a description ie. \"H2O vSphere-8.0.1 (NSX-T) - Expires: 2023-08-15 12:16:53 PM\""
  echo ""
  echo "           Provider: -p AZURE_AKS"
  echo "                        --subscriptino_id <'id'>       # Azure Subscription ID"
  echo "                        --tenant_id <'id'>             # Azure Tenant ID"
  echo "                        --location <'name'>            # Azure Location ie. switzerlandnorth, switzerlandwest"
  echo ""
  echo "                     -p AWS_EKS"
  echo "                        --account_credential '<name>'  # AWS EKS Lifecycle Management - Account Credential" 
  echo "                        --location 'location'          # AWS Datacenter location ie. eu-central-1"
  echo "                        --vpc 'name'                   # AWS Virtual Private Cloud (VPC) with Public and Private Subnets"
  echo "                                                       # https://docs.aws.amazon.com/eks/latest/userguide/creating-a-vpc.html"
  echo ""
  echo "                     -p VSPHERE_TKGS"
  echo "                       --vcenter_server '<name>'       # vCenter Server Name or IP Address"
  echo "                       --vcenter_user '<user_name>'    # vCenter Server Administrator User"
  echo "                       --vcenter_pass '<password>'     # vCenter Server Administrator Password"
  echo "                       --wcp '<name>'                  # vSphere Supervisor Cluster Name (WCP)"
  echo ""
}

# --- SET DEFAULTS ---
unset VSPHERE_TKGS_VCENTER_SERVER && export VSPHERE_TKGS_VCENTER_SERVER=""
unset VSPHERE_TKGS_VCENTER_PASSWORD && export VSPHERE_TKGS_VCENTER_PASSWORD=""
unset VSPHERE_TKGS_VCENTER_ADMIN && export VSPHERE_TKGS_VCENTER_ADMIN=""
unset VSPHERE_TKGS_SUPERVISOR_CLUSTER && export VSPHERE_TKGS_SUPERVISOR_CLUSTER=""
unset VSPHERE_TKGS_SUPERVISOR_STORAGE_POLICY && export VSPHERE_TKGS_SUPERVISOR_STORAGE_POLICY=""
unset VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS && export VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS=""
unset VSPHERE_TKGS_DNS_SERVER && export VSPHERE_TKGS_DNS_SERVER=""

while [ "$1" != "" ]; do
  case $1 in
    -p)                    PROVIDER=$2; CMD_ARGS="$CMD_ARGS -p $2";;
    -d)                    COMMENT=$(echo $2 | sed 's/ /~1~/g'); CMD_ARGS="$CMD_ARGS -d $COMMENT";;
    --subscriptino_id)     AZURE_SUBSCRIPTION_ID=$2;CMD_ARGS="$CMD_ARGS --subscriptino_id $2";;
    --tenant_id)           AZURE_TENANT_ID=$2;CMD_ARGS="$CMD_ARGS --tenant_id $2";;
    --client_id)           AZURE_CLIENT_ID=$2;CMD_ARGS="$CMD_ARGS --client_id $2";;
    --client_secret)       AZURE_CLIENT_SECRET=$2;CMD_ARGS="$CMD_ARGS --client_secret $2";;
    --location)            AZURE_LOCATION=$2;CMD_ARGS="$CMD_ARGS --location $2";;
    --region)              AWS_REGION=$2;CMD_ARGS="$CMD_ARGS --region $2";;
    --vcenter_server)      VSPHERE_TKGS_VCENTER_SERVER=$2;CMD_ARGS="$CMD_ARGS --vcenter_server $2";;
    --vcenter_user)        VSPHERE_TKGS_VCENTER_ADMIN=$2;CMD_ARGS="$CMD_ARGS --vcenter_user $2";;
    --vcenter_pass)        VSPHERE_TKGS_VCENTER_PASSWORD=$2;CMD_ARGS="$CMD_ARGS --vcenter_pass $2";;
    --wcp)                 VSPHERE_TKGS_SUPERVISOR_CLUSTER=$2;CMD_ARGS="$CMD_ARGS --wcp $2";;
    -v)                    DEPLOY_TKG_VERSION=$2;CMD_ARGS="$CMD_ARGS -v $2";;
    --debug)               DEBUG=1;CMD_ARGS="$CMD_ARGS -p $2";;
    --native)              NATIVE=1;CMD_ARGS="$CMD_ARGS -p $2";;
    --usage)               usage; exit;;
  esac
  shift
done

#############################################################################################################################
################################################ PROVIDER: VSPHERE_TKGS #####################################################
#############################################################################################################################
[ "$PROVIDER" == "" ] && usage && exit 1
if [ "$PROVIDER" == "VSPHERE_TKGS" ]; then 
  if [ "$VSPHERE_TKGS_VCENTER_SERVER" == "" -o "$VSPHERE_TKGS_VCENTER_PASSWORD" == "" -o \
       "$VSPHERE_TKGS_VCENTER_ADMIN" == "" -o "$VSPHERE_TKGS_SUPERVISOR_CLUSTER" == "" ]; then

    usage; exit 1
  fi

  VSPHERE_TKGS_VCENTER_SERVER=$(echo $VSPHERE_TKGS_VCENTER_SERVER | sed 's+^http.*//++g' | awk '{ printf("https://%s\n", $NF )}')

  # --- VERIFY ITS A H2O CLUSTER ---
  cnt=$(echo $VSPHERE_TKGS_VCENTER_SERVER | egrep -c "\.h2o-")
  if [ $cnt -gt 0 ]; then
    TXT="Register H2O vSphere Environment and adding Supervisor cluster to Tanzu Mission Control (TMC)"
    H2O_ID=$(echo "$VSPHERE_TKGS_VCENTER_SERVER" | awk -F'.' '{ print $2 }')
    TMC_DISPLAY_NAME="tkgmc-vsphere-${H2O_ID}-$TDH_USER"
    TDH_ENVIRONMENT_NAME="TDHenv-vsphere-${H2O_ID}"
    TMC_CONFIG_NAME="tmc-vsphere-${H2O_ID}"
    VSPHERE_TKGS_SUPERVISOR_STORAGE_POLICY=vc01cl01-t0compute
    VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS=vc01cl01-t0compute
    VSPHERE_TKGS_DNS_SERVER="10.79.2.5:53"
  else
    TXT="Register vSphere Environment and adding Supervisor cluster to Tanzu Mission Control (TMC)"
    TMC_CONFIG_NAME="tmc-vsphere-tkgs"
    TMC_DISPLAY_NAME="tkgmc-vsphere--$TDH_USER"
    TDH_ENVIRONMENT_NAME="TDHenv-vsphere"
  fi
fi

if [ "$PROVIDER" == "AWS_EKS" ]; then
  TXT="Register AWS Environment and prepare TMC for EKS Cluster deployment"
  if [ "$AWS_EKS_ACCOUNT_CREDENTIAL" == "" -o "$AWS_EKS_LOCATION" == "" ]; then 
    usage; exit 1
  fi
  checkTDHsettings tmc
fi

if [ "$PROVIDER" == "AZURE_AKS" ]; then
  TXT="Register Azure Environment and prepare TMC for AKS Cluster deployment"

  if [ "$AZURE_SUBSCRIPTION_ID" == "" -o "$AZURE_TENANT_ID" == "" -o "$AZURE_LOCATION" == "" ]; then
    usage; exit 1
  fi
fi

#############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################
runTDHtools $TDH_TOOLS_CONTAINER_TYPE $DEPLOY_TKG_VERSION "$TXT" "/home/tanzu/tanzu-demo-hub/$CMD_EXEC" "$CMD_ARGS"

# --- VERIFY TDH CONFIGURATION ---
#checkTDHsettings header
#checkTDHsettings tdh_user
#checkTDHsettings tmc

# --- VERIFY TOOLS AND ACCESS ---
#checkCLIcommands TOOLS
#checkCLIcommands TKG
#checkCLIcommands TANZU
#checkCLIcommands TMC

if [ "$PROVIDER" == "VSPHERE_TKGS" ]; then
  # --- CLEANUP KUNECONFIG ---
  #tmcCheckLogin
  vSphereKubeconfig  
  vSphereLogin

  if [ "$TMC_ENABLED" -eq 1 ]; then
    cnt=$(tmc managementcluster list | grep -c "$TMC_DISPLAY_NAME") 
    if [ $cnt -eq 0 ]; then
      cnt=$(kubectl get ns | egrep -c "^svc-tmc-") 
      if [ $cnt -gt 0 ]; then
        kubectl -n svc-tmc- get cm stack-config -o json > /tmp/clinfo.yaml 2>/dev/null; ret=$? 
        if [ $ret -eq 0 ]; then 
          clu_mgmt=$(jq -r '.data.management_cluster_name' /tmp/clinfo.yaml) 
          tmc_host=$(jq -r '.data.tmc_host' /tmp/clinfo.yaml) 
          tmc_url=$(jq -r '.data.tmc_url' /tmp/clinfo.yaml) 
    
          # --- CLEANUP TEMPORARY FILES ---
          rm -f /tmp/status.yaml
    
          if [ "$TMC_DISPLAY_NAME" != "$clu_mgmt" ]; then 
            echo "ERROR: vSphere Supervisor cluster ($VSPHERE_TKGS_SUPERVISOR_CLUSTER) is already registered in"
            echo "       TMC Instance ($tmc_url) as $tmc_host."
            echo "       Please unregister it first:"
           if [ "$NATIVE" == "0" ]; then
              echo "       => tools/${TDH_TOOLS}.sh"
              echo "          tdh-tools:/$ tmc managementcluster deregister $clu_mgmt"
              echo "          tdh-tools:/$ exit"
            else
              echo "       => tmc managementcluster deregister $clu_mgmt"
            fi
      
            exit 1
          else
            tmc_orgid=$(jq -r '.data.org_id' /tmp/clinfo.yaml)
      
            messageTitle "Verify TMC Registration of the vSphere Supervisor Cluster"
            messagePrint " ▪ Tanzu Mission Control (TMC) - Instance Name"            "$TMC_SERVER_URL"
            messagePrint " ▪ Tanzu Mission Control (TMC) - Organization Id"          "$tmc_orgid"
            messagePrint " ▪ TMC Management Clusrer - Display Name"                  "$TMC_DISPLAY_NAME"
            messagePrint " ▪ TMC Management Clusrer - vCenter Supervisor Cluster"    "$TMC_DISPLAY_NAME"
    
            ret=1; cnt=0
            while [ $ret -ne 0 -a $cnt -lt 5 ]; do
              tmc managementcluster get $TMC_DISPLAY_NAME -o json > /tmp/status.json 2>&1; ret=$? 
              [ $ret -eq 0 ] && break
              let cnt=cnt+1
              sleep 30
            done
    
            if [ $ret -ne 0 ]; then
             echo "ERROR: failed to get management cluster status"
             if [ "$NATIVE" == "0" ]; then
                echo "       => tools/${TDH_TOOLS}.sh"
                echo "          tdh-tools:/$ tmc managementcluster get $TMC_DISPLAY_NAME"
                echo "          tdh-tools:/$ exit"
              else
                echo "       => tmc managementcluster get $TMC_DISPLAY_NAME"
              fi
      
              exit 1
            fi
      
          mc_update=$(jq -r '.status.lastUpdate' /tmp/status.json)
              mc_status=$(jq -r '.status.healthDetails.message' /tmp/status.json)
            messagePrint " ▪ TMC Management Clusrer - Last Update from Agent"        "$mc_update"
            messagePrint " ▪ TMC Management Clusrer - Agent Status"                  "$mc_status"
           
            # --- CLEANUP TEMPORARY FILES ---
            rm -f /tmp/status.yaml
          fi
        else
          messageTitle "Register vSphere Supervisor Cluster to Tanzu Mission Control (TMC)"
          messagePrint " ▪ vCenter Supervisor Cluster"                       "$VSPHERE_TKGS_SUPERVISOR_CLUSTER"
          messagePrint " ▪ Tanzu Mission Control (TMC) - Instance"            "$TMC_SERVER_URL"
          messagePrint " ▪ Tanzu Mission Control (TMC) - Management Clusrer"  "$TMC_DISPLAY_NAME"
        messagePrint " ▪ Tanzu Mission Control (TMC) - Cluster Group"       "tanzu-demo-hub"
      
            ret=1; cnt=0
          while [ $ret -ne 0 -a $cnt -lt 5 ]; do
            tmc managementcluster register -c tanzu-demo-hub $TMC_DISPLAY_NAME -p TKGS -k $HOME/.kube/config > /dev/null 2>&1; ret=$?
            [ $ret -eq 0 ] && break
            let cnt=cnt+1
            sleep 30
        done
        
          if [ $ret -ne 0 ]; then
         echo "ERROR: failed to register vSphere supervisor cluster to Tanzu Mission Control (TMC)"
             if [ "$NATIVE" == "0" ]; then
              echo "       => tools/${TDH_TOOLS}.sh"
              echo "          tdh-tools:/$ tmc managementcluster register -c tanzu-demo-hub $TMC_DISPLAY_NAME -p TKGS -k $HOME/.kube/config"
              echo "          tdh-tools:/$ exit"
            else
              echo "       => tmc managementcluster register -c tanzu-demo-hub tkgmc-vsphere-haas-464-sadubois -p TKGS -k $HOME/.kube/config"
            fi
      
            exit 1
          fi
        fi
      fi
    fi
  fi
  
  VSPHERE_NAMESPACE=tanzu-demo-hub
  VSPHERE_DATASTORE=datastore-19 
  VSPHERE_CONTENT_LIBRARY=tanzu-demo-hub
  
  TDH_VSPHERE_API_TOKEN=$(vSphereAPI_getToken "$VSPHERE_TKGS_VCENTER_SERVER" "$VSPHERE_TKGS_VCENTER_ADMIN" "$VSPHERE_TKGS_VCENTER_PASSWORD")
  
  vSphereAPI_createNamespace      $TDH_VSPHERE_API_TOKEN $VSPHERE_TKGS_VCENTER_SERVER $VSPHERE_NAMESPACE
  vSphereAPI_createContentLibrary $TDH_VSPHERE_API_TOKEN $VSPHERE_TKGS_VCENTER_SERVER $VSPHERE_CONTENT_LIBRARY $VSPHERE_DATASTORE
  vSphereAPI_updateNamespace      $TDH_VSPHERE_API_TOKEN $VSPHERE_TKGS_VCENTER_SERVER $VSPHERE_NAMESPACE
  
  messageTitle "TMC Management Server Configuration"
  messagePrint " ▪ H2O Demo Environment - Configuration"                   "\$HOME/.tanzu-demo-hub/config/${TDH_ENVIRONMENT_NAME}.cfg"
  messagePrint " ▪ vSphere Supervisor Cluster - Config YAML"               "\$HOME/.tanzu-demo-hub/config/${TMC_DISPLAY_NAME}.yml"
  messagePrint " ▪ vSphere Supervisor Cluster - Kubeconfig"                "\$HOME/.tanzu-demo-hub/config/${TMC_DISPLAY_NAME}.kubeconfig"
  messagePrint " ▪ Tanzu Mission Control (TMC) - Configuration Envfile"    "\$HOME/.tanzu-demo-hub/config/${TMC_CONFIG_NAME}.cfg"

  [ -f $HOME/.kube/config_$VSPHERE_TKGS_SUPERVISOR_CLUSTER ] && mv $HOME/.kube/config_$VSPHERE_TKGS_SUPERVISOR_CLUSTER $HOME/.tanzu-demo-hub/config/${TMC_DISPLAY_NAME}.kubeconfig
  
  KUBERNETES_RELEASE=$(kubectl get tanzukubernetesreleases | tail -1 | awk '{ print $1 }')


  COMMENT_TMP=$(echo $COMMENT | sed 's/~1~/ /g')
  
  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/${TMC_CONFIG_NAME}.cfg"
  echo "TDH_INFRASTRUCTURE=tmc"                                                  >  $CONFIG_FILE
  echo "TDH_ENVNAME=tkgs"                                                        >> $CONFIG_FILE
  echo "TDH_COMMENT=\"$COMMENT_TMP\""                                            >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_CLOUD=vSphere"                                            >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_DESCRIPTION='VMware Tanzu for vSphere (TKGs) on H2O'"     >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_MAINTAINER=$TDH_USER"                                     >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_DEBUG=false"                                              >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_CLUSTERGROUP=$VSPHERE_NAMESPACE"                          >> $CONFIG_FILE
  echo "TDH_MANAGEMENT_CLUSTER=$TMC_DISPLAY_NAME"                                >> $CONFIG_FILE
  echo "TDH_DEPLOYMENT_CLUSTER_PLAN=dev"                                         >> $CONFIG_FILE
  echo "TDH_TKGWC_STORAGE_CLASS=$VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS"          >> $CONFIG_FILE
  echo "TDH_TKGWC_KUBERNETES=\"$KUBERNETES_RELEASE\""                            >> $CONFIG_FILE
  echo ""                                                                        >> $CONFIG_FILE
  echo "nodes[0]='best-effort-xlarge'"                                           >> $CONFIG_FILE
  echo "nodes[1]='best-effort-2xlarge'"                                          >> $CONFIG_FILE
  echo "nodes[2]='best-effort-4xxlarge'"                                         >> $CONFIG_FILE

  cmdLoop kubectl get tkr > /tmp/output.txt 2>/dev/null
  k8s=$(awk '{ printf("%s:%s:%s:%s:\n",$1,$2,$3,$4)}' /tmp/output.txt | grep ":True:True:" | egrep -v "ubuntu" | sort -V | \
        egrep ":${wc_k8s}+|:v${wc_k8s}+" | tail -1 | awk -F':' '{ print $1 }' | awk -F'-' '{ print $1 }' | sed 's/^v//g')

  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/${TDH_ENVIRONMENT_NAME}.cfg"
  echo "TDH_TKGMC_INFRASTRUCTURE=vSphere"                                        >  $CONFIG_FILE
  echo "TDH_TKGMC_NAME=$TMC_DISPLAY_NAME"                                        >> $CONFIG_FILE
  echo "TDH_TKGMC_KUBERNETES=$k8s"                                               >> $CONFIG_FILE
  echo "TDH_TKGMC_ENVNAME=tkgs"                                                  >> $CONFIG_FILE
  echo "TDH_TKGMC_COMMENT=\"$COMMENT_TMP\""                                      >> $CONFIG_FILE
  echo "TDH_TKGMC_TMC_CONFIG=${TMC_CONFIG_NAME}.cfg"                             >> $CONFIG_FILE
  echo "TDH_TKGMC_STORAGE_CLASS=$VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS"          >> $CONFIG_FILE
  echo "TDH_TKGMC_VSPHERE_NAMESPACE=$VSPHERE_NAMESPACE"                          >> $CONFIG_FILE
  echo "TDH_TKGMC_VSPHERE_SERVER=$VSPHERE_TKGS_VCENTER_SERVER"                   >> $CONFIG_FILE
  echo "TDH_TKGMC_VSPHERE_USER=$VSPHERE_TKGS_VCENTER_ADMIN"                      >> $CONFIG_FILE
  echo "TDH_TKGMC_VSPHERE_PASS='$VSPHERE_TKGS_VCENTER_PASSWORD'"                 >> $CONFIG_FILE
  echo "TDH_TKGMC_SUPERVISORCLUSTER=$VSPHERE_TKGS_SUPERVISOR_CLUSTER"            >> $CONFIG_FILE
  echo "TDH_TKGMC_KUBECONFIG=${TMC_DISPLAY_NAME}.kubeconfig"                     >> $CONFIG_FILE
  echo "TDH_TKGMC_TOOLS_CONTAINER=tdh-tools-tkg-$DEPLOY_TKG_VERSION"             >> $CONFIG_FILE
  echo ""                                                                        >> $CONFIG_FILE
  echo "nodes[0]='best-effort-large'"                                            >> $CONFIG_FILE
  echo "nodes[1]='best-effort-2xlarge'"                                          >> $CONFIG_FILE
  echo "nodes[2]='best-effort-4xlarge'"                                          >> $CONFIG_FILE

  VSPHERE_TKGS_VCENTER_URL=$(echo $VSPHERE_TKGS_VCENTER_SERVER | awk -F'/' '{ print $NF }')
  VSPHERE_TKGS_VCENTER_ID=$(echo $VSPHERE_TKGS_DNS_USER | awk -F'-' '{ print $NF }')
  CFGPATH="\$HOME/.tanzu-demo-hub/config"
  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/${TMC_DISPLAY_NAME}.yml"
  echo "tdh_infrastructure_configuration:"                                       >  $CONFIG_FILE
  echo "  name: '$TMC_DISPLAY_NAME'"                                             >> $CONFIG_FILE
  echo "  infrastructure:"                                                       >> $CONFIG_FILE
  echo "    type: 'vSphere'"                                                     >> $CONFIG_FILE
  echo "    env: 'tkgs'"                                                         >> $CONFIG_FILE
  echo "  config:"                                                               >> $CONFIG_FILE
  echo "    network:"                                                            >> $CONFIG_FILE
  echo "      dns_server: '$VSPHERE_TKGS_DNS_SERVER'"                            >> $CONFIG_FILE
  echo "      dns_user: '$VSPHERE_TKGS_DNS_USER'"                                >> $CONFIG_FILE
  echo "    vcenter:"                                                            >> $CONFIG_FILE
  echo "      id: '$VSPHERE_TKGS_VCENTER_ID'"                                    >> $CONFIG_FILE
  echo "      url: '$VSPHERE_TKGS_VCENTER_SERVER'"                               >> $CONFIG_FILE
  echo "      server: '$VSPHERE_TKGS_VCENTER_URL'"                               >> $CONFIG_FILE
  echo "      serverid: '$VSPHERE_TKGS_DNS_USER'"                                >> $CONFIG_FILE
  echo "      admin_user: '$VSPHERE_TKGS_VCENTER_ADMIN'"                         >> $CONFIG_FILE
  echo "      admin_pass: '$VSPHERE_TKGS_VCENTER_PASSWORD'"                      >> $CONFIG_FILE
  echo "    supervisor_cluster:"                                                 >> $CONFIG_FILE
  echo "      name: '$VSPHERE_TKGS_SUPERVISOR_CLUSTER'"                          >> $CONFIG_FILE
  echo "      storage_policy: '$VSPHERE_TKGS_SUPERVISOR_STORAGE_POLICY'"         >> $CONFIG_FILE
  echo "      storage_class: '$VSPHERE_TKGS_SUPERVISOR_STORAGE_CLASS'"           >> $CONFIG_FILE
  echo "    vsphere_namespace:"                                                  >> $CONFIG_FILE
  echo "      - name: '$VSPHERE_NAMESPACE'"                                      >> $CONFIG_FILE
  echo "        vm_classes:"                                                     >> $CONFIG_FILE
  echo "          - 'best-effort-xlarge'"                                        >> $CONFIG_FILE
  echo "          - 'best-effort-2xlarge'"                                       >> $CONFIG_FILE
  echo "          - 'best-effort-4xlarge'"                                       >> $CONFIG_FILE
  echo "  config_files:"                                                         >> $CONFIG_FILE
  echo "    kubeconfig: '$CFGPATH/${TMC_DISPLAY_NAME}.kubeconfig'"               >> $CONFIG_FILE

  echo "vSphere Environment (TDHenv-azure-${AZURE_LOCATION}) successfilly registered"
  echo ""
fi

if [ "$PROVIDER" == "AZURE_AKS" ]; then
  az logout > /dev/null 2>&1

  az group list > /dev/null 2>&1; ret=$?
  if [ $ret -ne 0 ]; then
    echo "Please login to Microsoft Azure as described below:"
    az login --tenant $AZURE_TENANT_ID -o none
  fi

  # --- VERIFY SERVICE PRINCIPAL ---
  az account set -s "${AZURE_SUBSCRIPTION_ID}"
  app_display_name="TanzuDemoHub-sadubois"
  app_display_name="TanzuDemoHub-${TDH_USER}-${AZURE_LOCATION}"
  az_aid=$(az ad app list --display-name "$app_display_name" | jq -r --arg key "$app_display_name" '.[] | select(.displayName == $key).appId')

  # --- CREATE APPLICATION AND SERVICE PRINCIPAL ---
  if [ "$az_aid" == "" ]; then
    messagePrint " ▪ Create Azure Service Principal"            "$app_display_name"
    az account set -s "${subscription_id}"
    az ad app create --display-name "${app_display_name}" > /tmp/error.log 2>&1; ret=0
    if [ $ret -ne 0 ]; then
      logMessages /tmp/error.log
      echo "ERROR: failed to create Application ID ($app_display_name)"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ az ad app create --display-name ${app_display_name}"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => az ad app create --display-name ${app_display_name}"
      fi

      exit 1
    fi

    app_obj_id=$(az ad app list --display-name "$app_display_name" | jq -r --arg key "$app_display_name" '.[] | select(.displayName == $key).appId')

    az ad sp create --id "${app_obj_id}" > /tmp/error.log 2>&1; ret=0
    if [ $ret -ne 0 ]; then
      logMessages /tmp/error.log
      echo "ERROR: failed to create Service Principal"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ az ad sp create --id ${app_obj_id}"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => az ad sp create --id ${app_obj_id}"
      fi

      exit 1
    fi

    az_aid=$(az ad app list --display-name "$app_display_name" | jq -r --arg key "$app_display_name" '.[] | select(.displayName == $key).appId')
  else
    messagePrint " ▪ Verify Azure Service Principal"            "$app_display_name"
  fi

  app_obj_id=$(az ad app list --display-name "$app_display_name" | jq -r --arg key "$app_display_name" '.[] | select(.displayName == $key).appId')
  spn_app_id=$(az ad sp list --display-name "${app_display_name}" --query [].appId --output tsv)
  tenant_id=$( az ad sp list --display-name "${app_display_name}" --query [].appOwnerTenantId --output tsv)
  tenantID=$(az account show --query tenantId -o tsv)
  pass=$(az ad sp credential reset --id "${spn_app_id}" 2>/dev/null | jq -r '.password')

  az ad sp create-for-rbac --name $app_display_name --role Owner --scopes /subscriptions/$AZURE_SUBSCRIPTION_ID > /tmp/error.log 2>&1; ret=0
  if [ $ret -ne 0 ]; then
    logMessages /tmp/error.log
    echo "ERROR: failed to create Role Binding"
    if [ "$NATIVE" == "0" ]; then
      echo "       => tools/${TDH_TOOLS}.sh"
      echo "          tdh-tools:/$ az ad sp create-for-rbac --name $app_display_name --role Owner --scopes /subscriptions/$AZURE_SUBSCRIPTION_ID"
      echo "          tdh-tools:/$ exit"
    else
      echo "       => az ad sp create-for-rbac --name $app_display_name --role Owner --scopes /subscriptions/$AZURE_SUBSCRIPTION_ID"
    fi

    exit 1
  fi

  CFGPATH="\$HOME/.tanzu-demo-hub/config"
  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/${TMC_DISPLAY_NAME}.yml"
  TMC_DISPLAY_NAME="TDHenv-azure-${AZURE_LOCATION}-$TDH_USER"

  k8s=$(az aks get-versions --location eastus | jq -r '.orchestrators[].orchestratorVersion' | tail -1)

  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/TDHenv-azure-${AZURE_LOCATION}.cfg"
  echo "TDH_TKGMC_INFRASTRUCTURE=Azure"                                          >  $CONFIG_FILE
  echo "TDH_TKGMC_NAME=TDHenv-azure-${AZURE_LOCATION}"                           >> $CONFIG_FILE
  echo "TDH_TKGMC_KUBERNETES=$k8s"                                               >> $CONFIG_FILE
  echo "TDH_TKGMC_ENVNAME=AKS"                                                   >> $CONFIG_FILE
  echo "TDH_TKGMC_COMMENT=\"$COMMENT\""                                          >> $CONFIG_FILE
  echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"                            >> $CONFIG_FILE
  echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"                                        >> $CONFIG_FILE
  echo "AZURE_CLIENT_ID=$az_aid"                                                 >> $CONFIG_FILE
  echo "AZURE_CLIENT_SECRET=$pass"                                               >> $CONFIG_FILE
  echo "AZURE_LOCATION=$AZURE_LOCATION"                                          >> $CONFIG_FILE
  echo "APP_DISPLAY_NAME=$app_display_name"                                      >> $CONFIG_FILE
  echo ""                                                                        >> $CONFIG_FILE
  echo "nodes[0]='Standard_D2ds_v4'"                                             >> $CONFIG_FILE
  echo "nodes[1]='Standard_D4ds_v4'"                                             >> $CONFIG_FILE
  echo "nodes[2]='Standard_D8ds_v4'"                                             >> $CONFIG_FILE

  VSPHERE_TKGS_VCENTER_URL=$(echo $VSPHERE_TKGS_VCENTER_SERVER | awk -F'/' '{ print $NF }')
  VSPHERE_TKGS_VCENTER_ID=$(echo $VSPHERE_TKGS_DNS_USER | awk -F'-' '{ print $NF }')
  CFGPATH="\$HOME/.tanzu-demo-hub/config"
  CONFIG_FILE="$HOME/.tanzu-demo-hub/config/TDHenv-azure-${AZURE_LOCATION}.yml"
  echo "tdh_infrastructure_configuration:"                                       >  $CONFIG_FILE
  echo "  name: '$TMC_DISPLAY_NAME'"                                             >> $CONFIG_FILE
  echo "  infrastructure:"                                                       >> $CONFIG_FILE
  echo "    type: 'Azure'"                                                       >> $CONFIG_FILE
  echo "    env: 'aks'"                                                          >> $CONFIG_FILE
  echo "  credentials:"                                                          >> $CONFIG_FILE
  echo "    subscription_id: '$AZURE_SUBSCRIPTION_ID'"                           >> $CONFIG_FILE
  echo "    tenant_id: '$AZURE_TENANT_ID'"                                       >> $CONFIG_FILE
  echo "    client_id: '$az_aid'"                                                >> $CONFIG_FILE
  echo "    client_secret: '$pass'"                                              >> $CONFIG_FILE
  echo "  config:"                                                               >> $CONFIG_FILE
  echo "    resourcwe_group: 'tdh-rg'"                                           >> $CONFIG_FILE
  echo "    location: '$AZURE_LOCATION'"                                         >> $CONFIG_FILE
  echo "    app_display_name: $app_display_name"                                 >> $CONFIG_FILE
  echo "    network:"                                                            >> $CONFIG_FILE
  echo "      dns_server: '$VSPHERE_TKGS_DNS_SERVER'"                            >> $CONFIG_FILE
  echo "      dns_user: '$VSPHERE_TKGS_DNS_USER'"                                >> $CONFIG_FILE
  echo "    vm_classes:"                                                         >> $CONFIG_FILE
  echo "      - 'Standard_D2ds_v4'"                                              >> $CONFIG_FILE
  echo "      - 'Standard_D4ds_v4'"                                              >> $CONFIG_FILE
  echo "      - 'Standard_D8ds_v4'"                                              >> $CONFIG_FILE
  echo "  config_files:"                                                         >> $CONFIG_FILE
  echo "    kubeconfig: '$CFGPATH/${TMC_DISPLAY_NAME}.kubeconfig'"               >> $CONFIG_FILE

  echo "Azure Envuronment (TDHenv-azure-${AZURE_LOCATION}) successfilly registered"
  echo ""

#echo "az login --service-principal --username $az_aid --password \"$pass\" --tenant \"${AZURE_TENANT_ID}\""
#echo "az ad app delete  -id $az_aid" 
#echo "az ad sp delete --id ${app_obj_id}"

fi







