#!/bin/bash
# ############################################################################################
# File: ........: deployTKG 
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export DEPLOY_TKG_CLEAN=0
export TDH_TKGWC_K8S_VERSION=""
export TDH_TANZU_MISSION_CONTROL_REGISTRATION=true
export TDH_TOOLS_CONTAINER_TYPE=tkg

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

# --- CHECK FOR BASIC COMANDS ---
checkCLIcommands        BASIC

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <tkg-deployment.cfg> -c <tkg-configuration.cfg> -n <cluster-name> [-k <kubernetes-version>] [--debug]"
  echo "            Options:  -n  <cluster-name>        # Should reflect the environment and its purpose. Make sure"
  echo "                                                # to add your user name, to prevent conflicts in TMC"
  echo "                                                # ie. tdh-azure-sdubois or tdh-aws-sdubois-aws"
  echo ""
  echo "                      -tag <name-tag>           # Cluster NameTag ie. TKG_CLUSTER_01 or TKG_CLUSTER_02"
  echo "                      -k  <controlplane-ip>     # default (latest)"
  echo "                                                # use 'tanzu kubernetes-release get' to see available"
  echo ""
  echo "                      --delete                  # Delete Workload Cluster"
  echo "                      --debug                   # default (disabled)"
  echo "                      --native                  # Use 'native' installed tools instead of the tdh-tools container"
  echo ""
}

while [ "$1" != "" ]; do
  case $1 in
    -d)   TKG_DEPLOYMENT=$2;;
    -c)   TKG_CONFIGURATION=$2;;
    -n)   TDH_TKGWC_NAME=$2;;
    -k)   TDH_TKGWC_K8S_VERSION=$2;;
    -tag) TDH_TKGWC_NAME_TAG=$2;;
    --debug)       DEBUG=1;;
    --delete)      DEPLOY_TKG_CLEAN=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

if [ "${TKG_DEPLOYMENT}" == "" -o "${TKG_CONFIGURATION}" == "" ]; then
  [ "${TKG_DEPLOYMENT}" == "" ] && listTKGmc
  [ "${TKG_CONFIGURATION}" == "" ] && listClusterConfig

  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ -f $HOME/.tanzu-demo-hub/config/${TKG_DEPLOYMENT} ]; then
  TMC_DEPLOYMENT_CONFIG=${HOME}/.tanzu-demo-hub/config/${TKG_DEPLOYMENT}
  TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $TMC_DEPLOYMENT_CONFIG | awk -F'=' '{ print $2 }' | sed 's/"//g')
  TDH_TKGMC_TOOLS_CONTAINER=$(egrep "^TDH_TKGMC_TOOLS_CONTAINER=" $TMC_DEPLOYMENT_CONFIG | awk -F'=' '{ print $2 }' | sed 's/"//g' | awk -F'-' '{ print $NF }')
  K8S_TKGMC=$(echo $TDH_TKGMC_TOOLS_CONTAINER | awk -F'.' '{ printf("%s.%s\n",$1,$2) }')

  . $HOME/.tanzu-demo-hub/config/${TKG_DEPLOYMENT}
else
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in the directory:"
  echo "       $HOME/.tanzu-demo-hub/config"
  exit 1
fi

if [ -f $TDHPATH/deployments/$TKG_CONFIGURATION ]; then
  TKG_TANZU_KUBERNETES_GRID=$(egrep "^TKG_TANZU_KUBERNETES_GRID=" $TDHPATH/deployments/$TKG_CONFIGURATION | awk -F'=' '{ print $2 }') 
  K8S_TKGWC=$(echo $TKG_TANZU_KUBERNETES_GRID | awk -F'.' '{ printf("%s.%s\n",$1,$2) }')

  if [ "$K8S_TKGMC" != "$K8S_TKGWC" ]; then 
    K8S_SHORT=$(echo $TDH_TKGMC_TOOLS_CONTAINER | awk -F'.' '{ printf("%s.%s.x\n",$1,$2) }') 
    echo "ERROR: Management Cluster ($TDH_TKGMC_NAME) deployed with $TKG_DEPLOYMENT has been configured"
    echo "       with TKG ${K8S_TKGMC}.x, but the TKG Workload Cluster defined in $TKG_CONFIGURATION"
    echo "       requires TKG ${K8S_TKGWC}.x. Please use a TDK Configuration supporteing TKG $K8S_SHORT instead"
    echo ""
    exit
  fi

  . ${TDHPATH}/deployments/$TKG_CONFIGURATION
else
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in the directory:"
  echo "       $TDHPATH/deployments or $HOME/.tanzu-demo-hub/config"
  exit 1
fi

############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################
runTDHtools "$TDH_TOOLS_CONTAINER_TYPE" "$TDH_TOOLS_CONTAINER_VERS" "Deploy TKG Workload Cluster" "$TDHPATH/$CMD_EXEC" "$CMD_ARGS"

listDeployments() {
  echo
  printf "%-31s %-7s %-28s %s\n" "CONFIURATION" "CLOUD" "MANAGEMENT-CLUSTER" "STATUS"
  echo "-----------------------------------------------------------------------------------------------------------"

  cnt=$(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null | wc -l | sed 's/  *//g')
  if [ $cnt -eq 0 ]; then
    echo "No TKG Management Cluster has been deployed, Please use ./deployTKGmc"
  else
    for deployment in $(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null); do
      TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_CONFIG=$(egrep "^TDH_TKGMC_CONFIG=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_INFRASTRUCTURE=$(egrep "^TDH_TKGMC_INFRASTRUCTURE=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_KUBECONFIG=$(egrep "^TDH_TKGMC_KUBECONFIG=" $deployment | awk -F'=' '{ print $2 }')

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        TDH_REGION=$(egrep "^AZURE_LOCATION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" ]; then
        TDH_REGION=$(egrep "^AWS_REGION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      # --- VERIFY MANAGEMENT CLUSTER ---
      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" -o "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        kubectl get cluster --kubeconfig ${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_KUBECONFIG} --request-timeout 1 > /dev/null 2>&1
        if [ $? -ne 0 ]; then smc="unavailable"; else smc="active"; fi

        cnt=$(kubectl config get-clusters | egrep -c "^$TDH_TKGMC_NAME")
        if [ $cnt -eq 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
      else
        cnt=$(tanzu config server list |  egrep -c " $TDH_TKGMC_NAME ")
        if [ $cnt -gt 0 ]; then
          smc="active"
          ctx=$(tanzu config server list |  egrep " $TDH_TKGMC_NAME " | awk '{ print $NF }')
          kubectl config use-context $ctx > /dev/null 2>&1
          if [ $? -ne 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
        else
          smc="unavailable"
        fi
      fi

      dep=$(echo $deployment | awk -F'/' '{ print $NF }')

      printf "%-31s %-7s %-28s %-22s %-18s %s\n" $dep $TDH_TKGMC_INFRASTRUCTURE $TDH_TKGMC_NAME "$stt"
    done
  fi

  echo "-----------------------------------------------------------------------------------------------------------"
}

if [ "$TDH_DEPLOYMENT_CLUSTER_PLAN" == "dev" ]; then
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_DEV
else
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_PROD
fi

# --- SET THE CLUSTER NAME IF NON HAS SET WITH COMMAND LINE ARGS ---
[ "$TDH_TKGWC_NAME" == "" ] && TDH_TKGWC_NAME="tdh-$(echo $TDH_TKGMC_INFRASTRUCTURE | tr "[A-Z]" "[a-z]")-$TDH_USER"

# --- DIRTY FIX ---
export TDH_INFRASTRUCTURE=$TDH_TKGMC_INFRASTRUCTURE
export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

if [ "$DEPLOY_TKG_CLEAN" -eq 1 ]; then
  nam=$(tanzu cluster list $TDH_TKGWC_NAME -o json | jq -r '.[].name') 
  if [ "$nam" == "$TDH_TKGWC_NAME" ]; then
    messageTitle "Deleting TKG Workload Cluster $TDH_TKGWC_NAME"
    ret=1; cnt=0
    while [ $ret -ne 0 -a $cnt -lt 5 ]; do
      tanzu cluster delete $TDH_TKGWC_NAME -y > /tmp/error.log 2>&1; ret=$? 
      [ $ret -eq 0 ] && break

      sleep 300
      let cnt=cnt+1
    done

    if [ $ret -ne 0 ]; then
      logMessages /tmp/error.log
      echo "ERROR: failed to delete TKG Cluster $TDH_TKGWC_NAME"
      if [ "$NATIVE" == "0" ]; then
        echo "       => tools/${TDH_TOOLS}.sh"
        echo "          tdh-tools:/$ tanzu cluster delete $TDH_TKGWC_NAME -y"
        echo "          tdh-tools:/$ exit"
      else
        echo "       => tanzu cluster delete $TDH_TKGWC_NAME -y"
      fi
      exit 1
    fi

    # --- WAIT FOR CLUSTER TO BE DELETED ---
    messagePrint " â–ª Wait for cluster to be deleted"     "$TDH_TKGWC_NAME"

    stt="deleting"; cnt=0
    while [ "$stt" != "" -a $cnt -lt 5 ]; do
      stt=$(tanzu cluster list $TDH_TKGWC_NAME -o json | jq -r '.[].status') 
      [ "$stt" == "" ] && break

      sleep 30
      let cnt=cnt+1
    done
  fi

  cleanKubeconfig

  exit 0
fi

# --- VERYFY ACCESS TO CLOUD ---
checkTDHenvironment

# --- VERIFY TOOLS AND ACCESS ---
checkTanzuCLI
checkCloudCLI
checkCLIcommands TOOLS
checkCLIcommands TKG
checkCLIcommands TANZU
checkCLIcommands TMC

if [ "$TDH_TKGWC_K8S_VERSION" != "" ]; then 
  tanzu kubernetes-release get 2323 | sed '1d'
  cnt=$(tanzu kubernetes-release get $TDH_TKGWC_K8S_VERSION | sed '1d' | wc -l | sed 's/  *//g') 
  if [ $cnt -eq 0 ]; then 
    cnt=$(tanzu kubernetes-release get | grep -c " $TDH_TKGWC_K8S_VERSION ")
    if [ $cnt -gt 0 ]; then 
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please take the 'NAME'"
      echo "       instead of the 'VERSION'."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    else
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please choose one from"
      echo "       the 'NAME' Column."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    fi
  fi
else
  cnt=0; ret=1
  while [ $ret -ne 0 -a $cnt -lt 5 ]; do
    TDH_TKGWC_K8S_VERSION=$(tanzu kubernetes-release get 2>/dev/null | tail -1 | awk '{ print $1 }'); ret=$?

    [ $ret -eq 0 ] && break
    let cnt=cnt+1
    sleep 30
  done
fi

tkgCreateCluster

# --- CLEANUP KUNECONFIG ---
cleanKubeconfig
setK8sEnvironment $TDH_TKGWC_NAME
checkTMCAccess
tmcCheckLogin

export TDH_TKGWC_CONTEXT=$(kubectl config current-context)
export TDH_ENVNAME=$TDH_TKGMC_ENVNAME
export TMC_PROVISIONER_NAME="attached"
export TDH_MANAGEMENT_CLUSTER=$TDH_TKGMC_NAME

messageTitle "Waiting for system pods to have completed starting"
runningPods kube-system
runningPods tkg-system

messageTitle "Waiting for Kapp Services to have completed starting"
#waitForKappServices   default     ${TDH_TKGWC_NAME}-kapp-controller-ctrl 
#waitForKappServices   tkg-system  ${TDH_TKGWC_CNI}-ctrl 
#waitForKappServices   tkg-system  tanzu-core-ctrl 

uodateConfigMap tanzu-demo-hub TDH_DOMAIN                         $AWS_HOSTED_DNS_DOMAIN
uodateConfigMap tanzu-demo-hub TDH_ENVNAME                        $TDH_TKGMC_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE                "tkg"
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC                 "false"
uodateConfigMap tanzu-demo-hub TDH_TANZU_EDITION                  "tkg"

uodateConfigMap tanzu-demo-hub TDH_CLUSTER_NAME                   "$TDH_TKGWC_NAME"
uodateConfigMap tanzu-demo-hub TDH_MANAGEMENT_CLUSTER             "$TDH_TKGMC_NAME"
uodateConfigMap tanzu-demo-hub TDH_PROVISIONER_NAME               "$TMC_PROVISIONER_NAME"
uodateConfigMap tanzu-demo-hub TDH_MISSION_CONTROL_ACCOUNT_NAME   "ukn"

if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" -a "$TDH_TKGMC_ENVNAME" != "tkgs" ]; then
  InstallMetallLB
fi

# --- INSTALL K8 SERVICES ---
#InstallCertManager
#InstallContour
#InstallHarborRegistry

if [ -s $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg ]; then 
 . $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg 
else
  echo "ERROR: Tanzu Package Repository Configuration not found for the release ${TDH_TOOLS_CONTAINER_TYPE}/${TDH_TOOLS_CONTAINER_VERS}"
  echo "       => $TDHPATH/files/tanzu-packages/repo-${TDH_TOOLS_CONTAINER_TYPE}-${TDH_TOOLS_CONTAINER_VERS}.cfg"
  exit
fi

messageTitle "Helm Package Management"
cmdLoop kubectl get secret -n default -o json > /tmp/output.yaml
if [ -s /tmp/output.yaml ]; then
  nam=$(jq -r --arg key "tanzu-demo-hub-tls" '.items[].metadata | select(.name == $key).name' /tmp/output.yaml)
  if [ "$nam" != "tanzu-demo-hub-tls" ]; then
    InstallCertManager
    createClusterIssuer
    getRootCA                    tanzu-demo-hub-tls
  fi
fi

exit

messageTitle "Tanzu Package Management"
if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
  installClusterEssentials
  TanzuPackage_AddRepo       $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE $TDH_SERVICE_PACKAGE_REPOSITORY_NAME $TDH_SERVICE_PACKAGE_REPOSITORY_ID
  TanzuPackage_RepoSync      $TDH_SERVICE_PACKAGE_REPOSITORY_NAMESPACE
else
  TanzuPackage_RepoSync      default
fi

TanzuPackage_CertManager     cert-manager-pkg     cert-manager.tanzu.vmware.com 
TanzuPackage_Contour         contour-pkg          contour.tanzu.vmware.com
TanzuPackage_Harbor          harbor-pkg           harbor.tanzu.vmware.com

installBuildService          ## Tanzu Build Service (TBS)
installTanzuDataPostgres     ## Tanzu Data SQL
installSpringCloudGateway
installMinio
installKubeapps
installGitea
installJenkins
installArgoCD
installGitLab

#########################################################################################################################
################################################ TMC INTEGRATION ########################################################
#########################################################################################################################

if [ "$TDH_TANZU_MISSION_CONTROL_REGISTRATION" == "true" ]; then
  if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" -a "$TDH_TKGMC_ENVNAME" == "tkgs" ]; then
    TMC_PROVISIONER_NAME=attached
    TMC_MANAGEMENT_CLUSTER=attached
  else
    TDH_MANAGEMENT_CLUSTER=$TDH_TKGMC_NAME
    TMC_MANAGEMENT_CLUSTER=$TDH_MANAGEMENT_CLUSTER
    TMC_PROVISIONER_NAME=attached
    TMC_MANAGEMENT_CLUSTER=attached
    KUBECONFIG=$HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.kubeconfig
  fi

  stt=$(attachClusterToTMC $TDH_TKGWC_NAME $TMC_PROVISIONER_NAME $TMC_MANAGEMENT_CLUSTER $KUBECONFIG)
  if [ "$stt" == "READY/HEALTHY" ]; then 
    # --- NO CONNECTION FROM A PEZ-INTERNAL CLUSTER ---
    if [ "${TDH_TKGMC_INFRASTRUCTURE}" != "vSphere" ]; then
      checkTMCintegration      TO    ## Tanzu Observability (Wavefront)
      checkTMCintegration      TDP   ## Tanzu Data Protection
      checkTMCintegration      TCI   ## Tanzu Cluster Inspection
   fi
  else
    echo "ERROR: TKG Worklaod Cluster ($TDH_TKGWC_NAME) is currently in state: $stt. TMC Integration can not be"
    echo "       performed right now. Delete the Cluster manually in TMC or wait until it has disapiered and try again"
    echo ""
  fi
fi

echo "-----------------------------------------------------------------------------------------------------------"
echo "Tanzu Kubernetes Grid Cluster ($TDH_TKGWC_NAME) build completed"
echo "-----------------------------------------------------------------------------------------------------------"
if [ "$NATIVE" == "0" ]; then
  printf "\e[1m1.) Set KUBECONFIG and set the cluster context\e[0m\n"
  echo "    => tools/${TDH_TOOLS}.sh"
  echo "       tdh-tools:/$ kubectl config set-cluster ${TDH_TKGWC_NAME}"
  echo "       tdh-tools:/$ kubectl config use-context ${TDH_TKGWC_CONTEXT}"
  printf "\e[1m2.) Delete Cluster if not used anymore\e[0m\n"
  echo "    => tools/${TDH_TOOLS}.sh"
  echo "       tdh-tools:/$ tanzu cluster delete $TDH_TKGWC_NAME"
else
  echo "1.) Set KUBECONFIG and set the cluster context"
  echo "    => kubectl config set-cluster ${TDH_TKGWC_NAME}"
  echo "    => kubectl config use-context ${TDH_TKGWC_CONTEXT}"
  echo "    => kubectl config get-contexts"
  echo "3.) Delete Cluster if not used anymore"
  echo "    => tanzu cluster delete $TDH_TKGWC_NAME"
fi

exit 0

