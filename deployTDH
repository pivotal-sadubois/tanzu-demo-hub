#!/bin/bash
# ############################################################################################
# File: ........: deployTDH
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy Kubernetes Workload Cluster
# ############################################################################################

unset KUBECONFIG

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export DEPLOY_TKG_CLEAN=0
export TDHV2_DEPLOY_ENVIRONMENT
export TDHV2_WORKLOAD_CLUSTER
export TDHV2_MANAGEMENT_CLUSTER
export TDHV2_DEPLOYMENT
export TDHV2_DEPLOYMENT_FILE
export TDHV2_DNS_SUBDOMAIN
export TDHV2_LIST_DEPLOYMENTS=0
export TDH_USER=$USER

# --- SETTING FOR TDH-TOOLS ---
export START_COMMAND="$*"
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

# --- SOUTCE FOUNCTIONS AND USER ENVIRONMENT ---
[ -f $TANZU_DEMO_HUB/functions ] && . $TANZU_DEMO_HUB/functions
[ -f $HOME/.tanzu-demo-hub.cfg ] && . $HOME/.tanzu-demo-hub.cfg

usage() {
  echo ""
  echo "USAGE: $0 [options] -e <deploy-environment> -c <deployment-config> -sd/--subdomain <subdomain> [--debug]"
  echo "            Options:  --delete                  # Delete Workload Clusters and Cleanup"
  echo "                      --list                    # List Current Deployments"
  echo "                      --native                  # Use 'native' installed tools instead of the tdh-tools container"
  echo "                      --subdomain <domain>      # DNS Subdomain <subdomain>.<yourdomain>.com"

  echo ""
}

while [ "$1" != "" ]; do
  case $1 in
    -e)            TDHV2_DEPLOY_ENVIRONMENT=$2;;
    -c)            TDHV2_DEPLOYMENT_FILE=$2;;
    -sd)           TDHV2_DNS_SUBDOMAIN=$2;;
    --subdomain)   TDHV2_DNS_SUBDOMAIN=$2;;
    --list)        TDHV2_LIST_DEPLOYMENTS=1;;
    --debug)       DEBUG=1;;
    --delete)      DEPLOY_TKG_CLEAN=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

if [ "$TDHV2_LIST_DEPLOYMENTS" -eq 1 ]; then
  tdhHeader "Automated deployment of Tanzu Demo Environments"
  #messagePrint " ▪ List Current TDH Deployments" "\$HOME/.tanzu-demo-hub/deployments"
  export VERIFY="true"

  files/tdh-tools/tdh-context.sh
  exit 0
fi

if [ "${TDHV2_DEPLOY_ENVIRONMENT}" == "" -o "${TDHV2_DEPLOYMENT_FILE}" == "" -o "${TDHV2_DNS_SUBDOMAIN}" == "" ]; then
  tdhHeader "Automated deployment of Tanzu Demo Environments"
  #messagePrint " ▪ Shows Active Deployment Environments and Configuration" "\$HOME/.tanzu-demo-hub/config"
  [ "${TDHV2_DEPLOY_ENVIRONMENT}" == "" ] && listTDHenv
  [ "${TDHV2_DEPLOYMENT_FILE}" == "" ] && listClusterConfigV2

  usage; exit 0
fi

[ -f $HOME/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}.cfg ] && TDHV2_DEPLOY_ENVIRONMENT=${TDHV2_DEPLOY_ENVIRONMENT}

# --- VERIFY DEPLOYMENT ---
if [ -f $HOME/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}.cfg ]; then
  TMC_DEPLOYMENT_CONFIG=${HOME}/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}.cfg
  TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $TMC_DEPLOYMENT_CONFIG | awk -F'=' '{ print $2 }' | sed 's/"//g')
  TDH_TKGMC_TOOLS_CONTAINER=$(egrep "^TDH_TKGMC_TOOLS_CONTAINER=" $TMC_DEPLOYMENT_CONFIG | awk -F'=' '{ print $2 }' | sed 's/"//g' | awk -F'-' '{ print $NF }')
  K8S_TKGMC=$(echo $TDH_TKGMC_TOOLS_CONTAINER | awk -F'.' '{ printf("%s.%s\n",$1,$2) }')
  TDHV2_MANAGEMENT_CLUSTER=$TDH_TKGMC_NAME

  . $HOME/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}.cfg
else
  echo "ERROR: Deployment file $TDHV2_DEPLOY_ENVIRONMENT can not be found in the directory:"
  echo "       $HOME/.tanzu-demo-hub/config"
  exit 1
fi

if [ -f $TDHPATH/deployments/${TDHV2_DEPLOYMENT_FILE}.j2 ]; then
 tdh_tools=$(head -10 $TDHPATH/deployments/${TDHV2_DEPLOYMENT_FILE}.j2 | yq -o json | jq -r '.tdh_deployment.tdh_tools')
else
  echo "ERROR: Configuration file $TDHV2_DEPLOY_ENVIRONMENT can not be found in the directory:"
  echo "       $TDHPATH/deployments or $HOME/.tanzu-demo-hub/config"
  exit 1
fi

export TDHV2_MC_CONFIG=$HOME/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}
export TDHV2_WC_CONFIG=$HOME/.tanzu-demo-hub/config/${TDHV2_DEPLOY_ENVIRONMENT}
export TDHV2_SECRETS=$HOME/.tanzu-demo-hub
export AWS_HOSTED_DNS_DOMAIN=$AWS_ROUTE53_DNS_DOMAIN
export TDH_REGISTRY_VMWARE_NAME='registry.pivotal.io'
export TDH_REGISTRY_DOCKER_NAME='docker.io'

#############################################################################################################################
################################### EXECUTING CODE WITHIN  TDH-TOOLS DOCKER CONTAINER  ######################################
#############################################################################################################################
runTDHtools "tkg" "$tdh_tools" "Automated deployment of Tanzu Demo Environments ($(date))" "/home/tanzu/tanzu-demo-hub/$CMD_EXEC" "$CMD_ARGS" 

# --- CONVERT TDH CONFIG VARIABLES TO YAML ---
convertTDHconfig
convertTDHsecrets
createTDHdeployment

# --- VALIDATE TDH SETTINGS ---
clearConfigMapCache
#validateConfigVariables
#checkKubernetesServices

#############################################################################################################################
######################### DELETE TKG CLUSTER AND DETTACH TO TMC AND INSTALL TMC INTEGRATION #################################
#############################################################################################################################
if [ "$DEPLOY_TKG_CLEAN" -eq 1 ]; then 
  deleteKubernetesClusters
  exit 0
fi

#############################################################################################################################
######################### CREATE TKG CLUSTER AND ATTACH TO TMC AND INSTALL TMC INTEGRATION ##################################
#############################################################################################################################
for clu in $(getYAML WC_CLUSTER_LIST); do
  createKubernetesCluster
  messageTitle "Tanzu Package Management"
  installPackageRepositories

  installTanzuPackageCertManager
  installTanzuPackageContour
  installTanzuPackageHarbor

  #installBuildService               ## Tanzu Build Service (TBS)
  #installTanzuDataPostgres          ## Tanzu Data SQL
  #installSpringCloudGateway
  #installMinio
  #installKubeapps
  #installGiteaV2
  #installJenkins
  #installArgoCD
  #installGitLab
  #installKubeernetesDashboard       ## Kubernetes Dashboard
  installTAPV2                       ## Tanzu Application Platform (TAP)
done

mergeKubeconfigFiles
#configureAppLiveView
#configureSupplyChainBasic
prepareDeploymentLog

echo 
messageTitle " *** Thank you for using Tanzu Demo Hub ***"

exit



